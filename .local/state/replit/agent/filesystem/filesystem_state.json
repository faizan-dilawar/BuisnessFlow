{"file_contents":{"README.md":{"content":"# InvoiceFlow - SaaS Invoicing & Accounting Web App\n\nA modern, full-featured invoicing and small business accounting application built with React, Node.js, and MySQL. Inspired by MyBillBook, this application provides comprehensive business management tools for small businesses.\n\n## Features\n\n### Core Functionality\n- **User Management**: JWT-based authentication with signup/login/logout\n- **Customer Management**: Create, edit, and manage customer information\n- **Product/Service Inventory**: Track products with SKU, pricing, and stock management\n- **Invoice Management**: \n  - Create, edit, and manage invoices with automatic numbering (INV-{YYYY}{MM}-{sequence})\n  - Multiple statuses: Draft → Issued → Paid → Cancelled\n  - PDF export with professional templates\n- **Payment Tracking**: Record payments and automatically update invoice status\n- **Expense Management**: Track business expenses by category\n- **Financial Reports**: Profit & Loss statements with date range filtering\n- **Dashboard**: Key metrics, recent activity, and low-stock alerts\n\n### Business Features\n- Single-company per account (no multi-tenant)\n- Automatic invoice numbering with monthly sequence reset\n- Stock management with optional negative stock allowance\n- Currency support (USD/INR toggle)\n- Tax calculation (GST/VAT support)\n- Professional PDF invoice generation\n\n## Tech Stack\n\n### Frontend\n- **React 18** with TypeScript\n- **Vite** for fast development and building\n- **Tailwind CSS** with Shadcn/UI components\n- **Wouter** for client-side routing\n- **React Query** for API state management\n- **React Hook Form** with Zod validation\n\n### Backend\n- **Node.js** with Express and TypeScript\n- **MySQL** database with Prisma ORM\n- **JWT** authentication with refresh tokens\n- **bcrypt** for password hashing\n- **Puppeteer** for PDF generation\n- **Express Rate Limiting** for security\n\n## Getting Started\n\n### Prerequisites\n- Node.js 18+ \n- MySQL 8.0+\n- npm or yarn\n\n### Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone <repository-url>\n   cd invoiceflow\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Set up environment variables**\n   ```bash\n   cp .env.example .env\n   ```\n   \n   Update `.env` with your configuration:\n   ```env\n   DATABASE_URL=\"mysql://username:password@host:3306/database_name\"\n   JWT_SECRET=\"your-strong-jwt-secret\"\n   JWT_REFRESH_SECRET=\"your-strong-refresh-secret\"\n   ```\n\n### Database Setup\n\n1. **Create MySQL database**\n   ```sql\n   CREATE DATABASE invoiceflow;\n   ```\n\n2. **Run database migrations**\n   ```bash\n   npm run db:push\n   ```\n\n3. **Seed the database with sample data**\n   ```bash\n   npm run seed\n   ```\n\n### Running the Application\n\n#### Development\n```bash\nnpm run dev\n","size_bytes":2743},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# InvoiceFlow - SaaS Invoicing & Accounting Web App\n\n## Overview\n\nInvoiceFlow is a modern, full-featured invoicing and small business accounting application built with React, Node.js, and PostgreSQL (using Drizzle ORM). The application provides comprehensive business management functionality including customer management, product inventory tracking, invoice generation with PDF export, payment tracking, expense management, and financial reporting. The system is designed as a single-company per account solution (non-multi-tenant) with JWT-based authentication and professional invoice generation capabilities.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React 18** with TypeScript for type safety and modern development\n- **Vite** for fast development builds and hot module replacement\n- **Tailwind CSS** with Shadcn/UI components for consistent, modern design system\n- **Wouter** for lightweight client-side routing instead of React Router\n- **React Query** (@tanstack/react-query) for server state management and caching\n- **React Hook Form** with Zod validation for form handling and validation\n- Component-based architecture with clear separation between UI components, pages, and business logic\n- Responsive design with mobile-first approach using Tailwind breakpoints\n\n### Backend Architecture\n- **Node.js** with Express and TypeScript for the REST API server\n- **Drizzle ORM** configured for PostgreSQL database operations\n- **JWT authentication** with access and refresh token strategy\n- **bcrypt** for secure password hashing\n- **Express Rate Limiting** for API security and abuse prevention\n- RESTful API design with consistent error handling and response formatting\n- Modular service layer for business logic separation (auth, PDF generation, storage)\n- Middleware-based request processing with authentication guards\n\n### Data Storage Solutions\n- **PostgreSQL** as the primary database (configured via Drizzle)\n- **Drizzle ORM** for type-safe database operations and migrations\n- Database schema includes: users, companies, customers, products, invoices, invoice items, payments, expenses, and counters\n- Foreign key relationships ensuring data integrity\n- Optimized queries for dashboard analytics and reporting features\n\n### Authentication and Authorization\n- **JWT-based authentication** with separate access (15min) and refresh (7 days) tokens\n- **bcrypt password hashing** with salt rounds for security\n- **Token-based authorization** middleware protecting API endpoints\n- **Rate limiting** on authentication endpoints to prevent brute force attacks\n- Session management through localStorage on client-side\n- Automatic token refresh mechanism for seamless user experience\n\n### Business Logic Features\n- **Automatic invoice numbering** with monthly sequence reset (INV-{YYYY}{MM}-{sequence})\n- **Invoice lifecycle management** (Draft → Issued → Paid → Cancelled)\n- **Stock management** with optional negative stock allowance\n- **Multi-currency support** (USD/INR with toggle capability)\n- **Tax calculation** supporting GST/VAT\n- **PDF generation** using Puppeteer for professional invoice documents\n- **Financial reporting** with P&L statements and date range filtering\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@neondatabase/serverless** - PostgreSQL database driver for serverless environments\n- **drizzle-orm** and **drizzle-kit** - Type-safe ORM and migration tools\n- **express** - Web application framework for Node.js\n- **puppeteer** - PDF generation for invoice exports\n- **bcrypt** - Password hashing library\n- **jsonwebtoken** - JWT token generation and verification\n\n### Frontend UI Dependencies\n- **@radix-ui** components - Accessible UI primitives (dialogs, dropdowns, forms, etc.)\n- **@tanstack/react-query** - Server state management and caching\n- **@hookform/resolvers** - Form validation resolvers\n- **react-hook-form** - Form handling library\n- **zod** - Schema validation library\n- **wouter** - Lightweight routing library\n- **date-fns** - Date manipulation utilities\n\n### Development and Build Tools\n- **vite** - Build tool and development server\n- **typescript** - Type checking and compilation\n- **tailwindcss** - Utility-first CSS framework\n- **postcss** and **autoprefixer** - CSS processing\n- **tsx** - TypeScript execution for Node.js development\n\n### Database and Configuration\n- **connect-pg-simple** - PostgreSQL session store\n- **drizzle-zod** - Zod schema generation from Drizzle schemas\n- Environment variable configuration for database connections and secrets\n- Replit-specific development banner integration\n\nThe application is designed to run on Replit with PostgreSQL database provisioning through environment variables, making it easily deployable and scalable for small business accounting needs.","size_bytes":4871},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"prisma/seed.ts":{"content":"import { PrismaClient } from '@prisma/client';\nimport bcrypt from 'bcrypt';\n\nconst prisma = new PrismaClient();\n\nasync function main() {\n  console.log('Starting seed...');\n\n  // Create admin user\n  const hashedPassword = await bcrypt.hash('Test@1234', 12);\n  \n  const user = await prisma.user.create({\n    data: {\n      email: 'admin@example.com',\n      passwordHash: hashedPassword,\n      name: 'Admin User',\n      role: 'admin',\n    },\n  });\n\n  console.log('Created user:', user.email);\n\n  // Create company\n  const company = await prisma.company.create({\n    data: {\n      userId: user.id,\n      name: 'InvoiceFlow Demo Company',\n      address: '123 Business Street, Suite 100\\nBusiness City, BC 12345',\n      gstin: 'GST123456789',\n      currency: 'USD',\n      timezone: 'UTC',\n      allowNegativeStock: false,\n    },\n  });\n\n  console.log('Created company:', company.name);\n\n  // Create customers\n  const customers = await Promise.all([\n    prisma.customer.create({\n      data: {\n        companyId: company.id,\n        name: 'Acme Corporation',\n        email: 'contact@acme.com',\n        phone: '+1-555-0123',\n        billingAddress: '456 Client Ave\\nClient City, CC 67890',\n      },\n    }),\n    prisma.customer.create({\n      data: {\n        companyId: company.id,\n        name: 'Tech Solutions Ltd',\n        email: 'billing@techsolutions.com',\n        phone: '+1-555-0456',\n        billingAddress: '789 Tech Boulevard\\nTech City, TC 11111',\n      },\n    }),\n    prisma.customer.create({\n      data: {\n        companyId: company.id,\n        name: 'Digital Agency',\n        email: 'accounts@digitalagency.com',\n        phone: '+1-555-0789',\n        billingAddress: '321 Digital Drive\\nDigital City, DC 22222',\n      },\n    }),\n    prisma.customer.create({\n      data: {\n        companyId: company.id,\n        name: 'StartUp Inc',\n        email: 'finance@startup.com',\n        phone: '+1-555-0321',\n        billingAddress: '654 Startup Street\\nStartup City, SC 33333',\n      },\n    }),\n    prisma.customer.create({\n      data: {\n        companyId: company.id,\n        name: 'Enterprise Corp',\n        email: 'payments@enterprise.com',\n        phone: '+1-555-0654',\n        billingAddress: '987 Enterprise Way\\nEnterprise City, EC 44444',\n      },\n    }),\n  ]);\n\n  console.log('Created customers:', customers.length);\n\n  // Create products\n  const products = await Promise.all([\n    prisma.product.create({\n      data: {\n        companyId: company.id,\n        sku: 'WEB-DEV-001',\n        name: 'Web Development Service',\n        description: 'Custom website development and design',\n        priceDecimal: 1500.00,\n        costDecimal: 800.00,\n        stockQty: 50,\n      },\n    }),\n    prisma.product.create({\n      data: {\n        companyId: company.id,\n        sku: 'HOST-001',\n        name: 'Web Hosting Package',\n        description: 'Monthly web hosting service',\n        priceDecimal: 25.00,\n        costDecimal: 10.00,\n        stockQty: 2,\n      },\n    }),\n    prisma.product.create({\n      data: {\n        companyId: company.id,\n        sku: 'SSL-PRO',\n        name: 'SSL Certificate Pro',\n        description: 'Professional SSL certificate service',\n        priceDecimal: 99.00,\n        costDecimal: 45.00,\n        stockQty: 4,\n      },\n    }),\n    prisma.product.create({\n      data: {\n        companyId: company.id,\n        sku: 'MAINT-001',\n        name: 'Website Maintenance',\n        description: 'Monthly website maintenance and updates',\n        priceDecimal: 200.00,\n        costDecimal: 100.00,\n        stockQty: 20,\n      },\n    }),\n    prisma.product.create({\n      data: {\n        companyId: company.id,\n        sku: 'SEO-001',\n        name: 'SEO Optimization',\n        description: 'Search engine optimization service',\n        priceDecimal: 500.00,\n        costDecimal: 250.00,\n        stockQty: 15,\n      },\n    }),\n    prisma.product.create({\n      data: {\n        companyId: company.id,\n        sku: 'CONS-001',\n        name: 'Technical Consultation',\n        description: 'Technical consultation and advisory',\n        priceDecimal: 150.00,\n        costDecimal: 75.00,\n        stockQty: 100,\n      },\n    }),\n    prisma.product.create({\n      data: {\n        companyId: company.id,\n        sku: 'TRAIN-001',\n        name: 'Staff Training',\n        description: 'Technical training for client staff',\n        priceDecimal: 300.00,\n        costDecimal: 150.00,\n        stockQty: 25,\n      },\n    }),\n    prisma.product.create({\n      data: {\n        companyId: company.id,\n        sku: 'SUPPORT-001',\n        name: 'Premium Support',\n        description: '24/7 premium technical support',\n        priceDecimal: 100.00,\n        costDecimal: 40.00,\n        stockQty: 30,\n      },\n    }),\n  ]);\n\n  console.log('Created products:', products.length);\n\n  // Create invoice counter for current month\n  const now = new Date();\n  await prisma.counter.create({\n    data: {\n      name: 'invoice',\n      year: now.getFullYear(),\n      month: now.getMonth() + 1,\n      sequence: 0,\n    },\n  });\n\n  // Create invoices\n  const invoices = [\n    // Paid invoice from last month\n    {\n      customerId: customers[0].id,\n      invoiceNo: 'INV-202411-001',\n      date: new Date('2024-11-15'),\n      dueDate: new Date('2024-12-15'),\n      status: 'paid' as const,\n      subTotal: 1500.00,\n      taxTotal: 270.00,\n      total: 1770.00,\n      notes: 'Initial website development project',\n      items: [\n        {\n          productId: products[0].id,\n          description: 'Web Development Service',\n          qty: 1,\n          unitPrice: 1500.00,\n          taxRate: 18.00,\n          lineTotal: 1770.00,\n        },\n      ],\n    },\n    // Issued invoice (pending payment)\n    {\n      customerId: customers[1].id,\n      invoiceNo: 'INV-202411-002',\n      date: new Date('2024-11-20'),\n      dueDate: new Date('2024-12-20'),\n      status: 'issued' as const,\n      subTotal: 625.00,\n      taxTotal: 112.50,\n      total: 737.50,\n      notes: 'Monthly hosting and maintenance',\n      items: [\n        {\n          productId: products[1].id,\n          description: 'Web Hosting Package',\n          qty: 1,\n          unitPrice: 25.00,\n          taxRate: 18.00,\n          lineTotal: 29.50,\n        },\n        {\n          productId: products[3].id,\n          description: 'Website Maintenance',\n          qty: 3,\n          unitPrice: 200.00,\n          taxRate: 18.00,\n          lineTotal: 708.00,\n        },\n      ],\n    },\n    // Draft invoice\n    {\n      customerId: customers[2].id,\n      invoiceNo: 'INV-202412-001',\n      date: new Date('2024-12-01'),\n      dueDate: new Date('2024-12-31'),\n      status: 'draft' as const,\n      subTotal: 2100.00,\n      taxTotal: 378.00,\n      total: 2478.00,\n      notes: 'Website development and SEO package',\n      items: [\n        {\n          productId: products[0].id,\n          description: 'Web Development Service',\n          qty: 1,\n          unitPrice: 1500.00,\n          taxRate: 18.00,\n          lineTotal: 1770.00,\n        },\n        {\n          productId: products[4].id,\n          description: 'SEO Optimization',\n          qty: 1,\n          unitPrice: 500.00,\n          taxRate: 18.00,\n          lineTotal: 590.00,\n        },\n        {\n          productId: products[2].id,\n          description: 'SSL Certificate Pro',\n          qty: 1,\n          unitPrice: 99.00,\n          taxRate: 18.00,\n          lineTotal: 116.82,\n        },\n      ],\n    },\n    // Overdue invoice\n    {\n      customerId: customers[3].id,\n      invoiceNo: 'INV-202410-001',\n      date: new Date('2024-10-15'),\n      dueDate: new Date('2024-11-15'),\n      status: 'issued' as const,\n      subTotal: 675.50,\n      taxTotal: 121.59,\n      total: 797.09,\n      notes: 'Training and consultation services',\n      items: [\n        {\n          productId: products[5].id,\n          description: 'Technical Consultation',\n          qty: 3,\n          unitPrice: 150.00,\n          taxRate: 18.00,\n          lineTotal: 531.00,\n        },\n        {\n          productId: products[6].id,\n          description: 'Staff Training',\n          qty: 1,\n          unitPrice: 225.50,\n          taxRate: 18.00,\n          lineTotal: 266.09,\n        },\n      ],\n    },\n    // Another paid invoice\n    {\n      customerId: customers[4].id,\n      invoiceNo: 'INV-202411-003',\n      date: new Date('2024-11-25'),\n      dueDate: new Date('2024-12-25'),\n      status: 'paid' as const,\n      subTotal: 400.00,\n      taxTotal: 72.00,\n      total: 472.00,\n      notes: 'Premium support subscription',\n      items: [\n        {\n          productId: products[7].id,\n          description: 'Premium Support',\n          qty: 4,\n          unitPrice: 100.00,\n          taxRate: 18.00,\n          lineTotal: 472.00,\n        },\n      ],\n    },\n    // Recent issued invoice\n    {\n      customerId: customers[0].id,\n      invoiceNo: 'INV-202412-002',\n      date: new Date('2024-12-05'),\n      dueDate: new Date('2025-01-05'),\n      status: 'issued' as const,\n      subTotal: 800.00,\n      taxTotal: 144.00,\n      total: 944.00,\n      notes: 'Additional development work',\n      items: [\n        {\n          productId: products[0].id,\n          description: 'Web Development Service - Phase 2',\n          qty: 1,\n          unitPrice: 800.00,\n          taxRate: 18.00,\n          lineTotal: 944.00,\n        },\n      ],\n    },\n  ];\n\n  for (const invoiceData of invoices) {\n    const { items, ...invoice } = invoiceData;\n    \n    const createdInvoice = await prisma.invoice.create({\n      data: {\n        ...invoice,\n        companyId: company.id,\n      },\n    });\n\n    for (const item of items) {\n      await prisma.invoiceItem.create({\n        data: {\n          ...item,\n          invoiceId: createdInvoice.id,\n        },\n      });\n    }\n\n    // Create payments for paid invoices\n    if (invoice.status === 'paid') {\n      await prisma.payment.create({\n        data: {\n          invoiceId: createdInvoice.id,\n          amount: invoice.total,\n          method: 'Bank Transfer',\n          paidAt: new Date(invoice.date.getTime() + 7 * 24 * 60 * 60 * 1000), // Paid 7 days after invoice date\n          reference: `PAY-${invoice.invoiceNo}`,\n        },\n      });\n    }\n  }\n\n  console.log('Created invoices:', invoices.length);\n\n  // Create expenses\n  const expenses = [\n    {\n      vendor: 'Office Supplies Co',\n      amount: 245.50,\n      category: 'Office Supplies',\n      date: new Date('2024-11-15'),\n      notes: 'Monthly office supplies and stationery',\n    },\n    {\n      vendor: 'Cloud Services Inc',\n      amount: 299.00,\n      category: 'Software',\n      date: new Date('2024-11-01'),\n      notes: 'Monthly cloud hosting and storage services',\n    },\n    {\n      vendor: 'Professional Development',\n      amount: 450.00,\n      category: 'Professional Services',\n      date: new Date('2024-11-20'),\n      notes: 'Team training and certification program',\n    },\n  ];\n\n  for (const expense of expenses) {\n    await prisma.expense.create({\n      data: {\n        ...expense,\n        companyId: company.id,\n      },\n    });\n  }\n\n  console.log('Created expenses:', expenses.length);\n  console.log('Seed completed successfully!');\n}\n\nmain()\n  .catch((e) => {\n    console.error(e);\n    process.exit(1);\n  })\n  .finally(async () => {\n    await prisma.$disconnect();\n  });\n","size_bytes":11240},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { z } from \"zod\";\nimport rateLimit from \"express-rate-limit\";\nimport { storage } from \"./storage\";\nimport { hashPassword, verifyPassword, generateTokens, verifyAccessToken } from \"./services/auth\";\nimport { generateInvoicePDF } from \"./services/pdf\";\nimport { \n  insertUserSchema, insertCompanySchema, insertCustomerSchema, insertProductSchema, \n  insertInvoiceSchema, insertInvoiceItemSchema, insertPaymentSchema, insertExpenseSchema \n} from \"@shared/schema\";\n\n// Rate limiting for auth endpoints\nconst authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // limit each IP to 5 requests per windowMs\n  message: \"Too many authentication attempts, please try again later.\",\n});\n\n// Middleware to verify JWT token\nconst authenticateToken = async (req: Request, res: Response, next: Function) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  const payload = verifyAccessToken(token);\n  if (!payload) {\n    return res.status(403).json({ message: 'Invalid or expired token' });\n  }\n\n  const user = await storage.getUser(payload.userId);\n  if (!user) {\n    return res.status(403).json({ message: 'User not found' });\n  }\n\n  (req as any).user = user;\n  next();\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Auth routes\n  app.post(\"/api/auth/signup\", authLimiter, async (req: Request, res: Response) => {\n    try {\n      const { email, password, name, companyName } = z.object({\n        email: z.string().email(),\n        password: z.string().min(6),\n        name: z.string().min(1),\n        companyName: z.string().min(1),\n      }).parse(req.body);\n\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      const passwordHash = await hashPassword(password);\n      const user = await storage.createUser({ email, passwordHash, name });\n      \n      // Create company for the user\n      await storage.createCompany({\n        userId: user.id,\n        name: companyName,\n      });\n\n      const tokens = generateTokens(user);\n      res.json(tokens);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid request data\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", authLimiter, async (req: Request, res: Response) => {\n    try {\n      const { email, password } = z.object({\n        email: z.string().email(),\n        password: z.string(),\n      }).parse(req.body);\n\n      const user = await storage.getUserByEmail(email);\n      if (!user || !(await verifyPassword(password, user.passwordHash))) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const tokens = generateTokens(user);\n      res.json(tokens);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid request data\" });\n    }\n  });\n\n  app.post(\"/api/auth/refresh\", async (req: Request, res: Response) => {\n    try {\n      const { refreshToken } = z.object({\n        refreshToken: z.string(),\n      }).parse(req.body);\n\n      const payload = verifyAccessToken(refreshToken);\n      if (!payload) {\n        return res.status(403).json({ message: \"Invalid refresh token\" });\n      }\n\n      const user = await storage.getUser(payload.userId);\n      if (!user) {\n        return res.status(403).json({ message: \"User not found\" });\n      }\n\n      const tokens = generateTokens(user);\n      res.json(tokens);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid request data\" });\n    }\n  });\n\n  // User profile\n  app.get(\"/api/user/profile\", authenticateToken, async (req: Request, res: Response) => {\n    const user = (req as any).user;\n    const company = await storage.getCompanyByUserId(user.id);\n    res.json({ user, company });\n  });\n\n  // Customer routes\n  app.get(\"/api/customers\", authenticateToken, async (req: Request, res: Response) => {\n    const user = (req as any).user;\n    const company = await storage.getCompanyByUserId(user.id);\n    if (!company) return res.status(404).json({ message: \"Company not found\" });\n    \n    const customers = await storage.getCustomersByCompanyId(company.id);\n    res.json(customers);\n  });\n\n  app.post(\"/api/customers\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const user = (req as any).user;\n      const company = await storage.getCompanyByUserId(user.id);\n      if (!company) return res.status(404).json({ message: \"Company not found\" });\n\n      const customerData = insertCustomerSchema.parse(req.body);\n      const customer = await storage.createCustomer({ ...customerData, companyId: company.id });\n      res.status(201).json(customer);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid customer data\" });\n    }\n  });\n\n  app.put(\"/api/customers/:id\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const customerData = insertCustomerSchema.partial().parse(req.body);\n      const customer = await storage.updateCustomer(req.params.id, customerData);\n      res.json(customer);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid customer data\" });\n    }\n  });\n\n  app.delete(\"/api/customers/:id\", authenticateToken, async (req: Request, res: Response) => {\n    await storage.deleteCustomer(req.params.id);\n    res.status(204).send();\n  });\n\n  // Product routes\n  app.get(\"/api/products\", authenticateToken, async (req: Request, res: Response) => {\n    const user = (req as any).user;\n    const company = await storage.getCompanyByUserId(user.id);\n    if (!company) return res.status(404).json({ message: \"Company not found\" });\n    \n    const products = await storage.getProductsByCompanyId(company.id);\n    res.json(products);\n  });\n\n  app.post(\"/api/products\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const user = (req as any).user;\n      const company = await storage.getCompanyByUserId(user.id);\n      if (!company) return res.status(404).json({ message: \"Company not found\" });\n\n      const productData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct({ ...productData, companyId: company.id });\n      res.status(201).json(product);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid product data\" });\n    }\n  });\n\n  app.put(\"/api/products/:id\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const productData = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(req.params.id, productData);\n      res.json(product);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid product data\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", authenticateToken, async (req: Request, res: Response) => {\n    await storage.deleteProduct(req.params.id);\n    res.status(204).send();\n  });\n\n  // Invoice routes\n  app.get(\"/api/invoices\", authenticateToken, async (req: Request, res: Response) => {\n    const user = (req as any).user;\n    const company = await storage.getCompanyByUserId(user.id);\n    if (!company) return res.status(404).json({ message: \"Company not found\" });\n    \n    const invoices = await storage.getInvoicesByCompanyId(company.id);\n    res.json(invoices);\n  });\n\n  app.get(\"/api/invoices/:id\", authenticateToken, async (req: Request, res: Response) => {\n    const invoice = await storage.getInvoiceWithItems(req.params.id);\n    if (!invoice) return res.status(404).json({ message: \"Invoice not found\" });\n    res.json(invoice);\n  });\n\n  app.post(\"/api/invoices\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const user = (req as any).user;\n      const company = await storage.getCompanyByUserId(user.id);\n      if (!company) return res.status(404).json({ message: \"Company not found\" });\n\n      const { invoice: invoiceData, items } = z.object({\n        invoice: insertInvoiceSchema.omit({ invoiceNo: true }),\n        items: z.array(insertInvoiceItemSchema.omit({ invoiceId: true })),\n      }).parse(req.body);\n\n      const invoiceNo = await storage.generateInvoiceNumber(company.id);\n      const invoice = await storage.createInvoice(\n        { ...invoiceData, companyId: company.id, invoiceNo },\n        items\n      );\n      \n      res.status(201).json(invoice);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid invoice data\" });\n    }\n  });\n\n  app.put(\"/api/invoices/:id\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const invoiceData = insertInvoiceSchema.partial().parse(req.body);\n      const invoice = await storage.updateInvoice(req.params.id, invoiceData);\n      res.json(invoice);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid invoice data\" });\n    }\n  });\n\n  app.get(\"/api/invoices/:id/pdf\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const user = (req as any).user;\n      const company = await storage.getCompanyByUserId(user.id);\n      if (!company) return res.status(404).json({ message: \"Company not found\" });\n\n      const invoice = await storage.getInvoiceWithItems(req.params.id);\n      if (!invoice) return res.status(404).json({ message: \"Invoice not found\" });\n\n      const pdfBuffer = await generateInvoicePDF({\n        invoice,\n        items: invoice.items,\n        customer: invoice.customer,\n        company,\n      });\n\n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', `attachment; filename=\"invoice-${invoice.invoiceNo}.pdf\"`);\n      res.send(pdfBuffer);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate PDF\" });\n    }\n  });\n\n  // Payment routes\n  app.post(\"/api/payments\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const paymentData = insertPaymentSchema.parse(req.body);\n      const payment = await storage.createPayment(paymentData);\n      res.status(201).json(payment);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid payment data\" });\n    }\n  });\n\n  // Expense routes\n  app.get(\"/api/expenses\", authenticateToken, async (req: Request, res: Response) => {\n    const user = (req as any).user;\n    const company = await storage.getCompanyByUserId(user.id);\n    if (!company) return res.status(404).json({ message: \"Company not found\" });\n    \n    const expenses = await storage.getExpensesByCompanyId(company.id);\n    res.json(expenses);\n  });\n\n  app.post(\"/api/expenses\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const user = (req as any).user;\n      const company = await storage.getCompanyByUserId(user.id);\n      if (!company) return res.status(404).json({ message: \"Company not found\" });\n\n      const expenseData = insertExpenseSchema.parse(req.body);\n      const expense = await storage.createExpense({ ...expenseData, companyId: company.id });\n      res.status(201).json(expense);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid expense data\" });\n    }\n  });\n\n  app.put(\"/api/expenses/:id\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const expenseData = insertExpenseSchema.partial().parse(req.body);\n      const expense = await storage.updateExpense(req.params.id, expenseData);\n      res.json(expense);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid expense data\" });\n    }\n  });\n\n  app.delete(\"/api/expenses/:id\", authenticateToken, async (req: Request, res: Response) => {\n    await storage.deleteExpense(req.params.id);\n    res.status(204).send();\n  });\n\n  // Analytics routes\n  app.get(\"/api/analytics/dashboard\", authenticateToken, async (req: Request, res: Response) => {\n    const user = (req as any).user;\n    const company = await storage.getCompanyByUserId(user.id);\n    if (!company) return res.status(404).json({ message: \"Company not found\" });\n\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    const today = new Date();\n\n    const metrics = await storage.getDashboardMetrics(company.id, thirtyDaysAgo, today);\n    const lowStockProducts = await storage.getLowStockProducts(company.id, 5);\n    \n    res.json({ ...metrics, lowStockProducts });\n  });\n\n  app.get(\"/api/reports/pnl\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const user = (req as any).user;\n      const company = await storage.getCompanyByUserId(user.id);\n      if (!company) return res.status(404).json({ message: \"Company not found\" });\n\n      const { from, to } = z.object({\n        from: z.string().transform(str => new Date(str)),\n        to: z.string().transform(str => new Date(str)),\n      }).parse(req.query);\n\n      const pnl = await storage.getProfitLoss(company.id, from, to);\n      res.json(pnl);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid date range\" });\n    }\n  });\n\n  // Company settings\n  app.put(\"/api/company/settings\", authenticateToken, async (req: Request, res: Response) => {\n    try {\n      const user = (req as any).user;\n      const company = await storage.getCompanyByUserId(user.id);\n      if (!company) return res.status(404).json({ message: \"Company not found\" });\n\n      const companyData = insertCompanySchema.partial().omit({ userId: true }).parse(req.body);\n      const updatedCompany = await storage.updateCompany(company.id, companyData);\n      res.json(updatedCompany);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid company data\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":13810},"server/storage.ts":{"content":"import { randomUUID } from \"crypto\";\nimport { eq, and, desc, asc, sum, gte, lte, sql } from \"drizzle-orm\";\nimport { db } from \"./db\";\nimport { \n  users, companies, customers, products, invoices, invoiceItems, payments, expenses, counters,\n  type User, type InsertUser, type Company, type InsertCompany, type Customer, type InsertCustomer,\n  type Product, type InsertProduct, type Invoice, type InsertInvoice, type InvoiceItem, type InsertInvoiceItem,\n  type Payment, type InsertPayment, type Expense, type InsertExpense\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Company operations\n  getCompanyByUserId(userId: string): Promise<Company | undefined>;\n  createCompany(company: InsertCompany): Promise<Company>;\n  updateCompany(id: string, company: Partial<InsertCompany>): Promise<Company>;\n  \n  // Customer operations\n  getCustomersByCompanyId(companyId: string): Promise<Customer[]>;\n  getCustomer(id: string): Promise<Customer | undefined>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  updateCustomer(id: string, customer: Partial<InsertCustomer>): Promise<Customer>;\n  deleteCustomer(id: string): Promise<void>;\n  \n  // Product operations\n  getProductsByCompanyId(companyId: string): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product>;\n  deleteProduct(id: string): Promise<void>;\n  \n  // Invoice operations\n  getInvoicesByCompanyId(companyId: string): Promise<Invoice[]>;\n  getInvoice(id: string): Promise<Invoice | undefined>;\n  getInvoiceWithItems(id: string): Promise<(Invoice & { items: InvoiceItem[]; customer: Customer }) | undefined>;\n  createInvoice(invoice: InsertInvoice, items: InsertInvoiceItem[]): Promise<Invoice>;\n  updateInvoice(id: string, invoice: Partial<InsertInvoice>): Promise<Invoice>;\n  generateInvoiceNumber(companyId: string): Promise<string>;\n  \n  // Payment operations\n  getPaymentsByInvoiceId(invoiceId: string): Promise<Payment[]>;\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  \n  // Expense operations\n  getExpensesByCompanyId(companyId: string): Promise<Expense[]>;\n  createExpense(expense: InsertExpense): Promise<Expense>;\n  updateExpense(id: string, expense: Partial<InsertExpense>): Promise<Expense>;\n  deleteExpense(id: string): Promise<void>;\n  \n  // Analytics\n  getDashboardMetrics(companyId: string, fromDate: Date, toDate: Date): Promise<{\n    revenue: number;\n    outstanding: number;\n    expenses: number;\n    profit: number;\n  }>;\n  getProfitLoss(companyId: string, fromDate: Date, toDate: Date): Promise<{\n    revenue: number;\n    cogs: number;\n    expenses: number;\n    grossProfit: number;\n    netProfit: number;\n  }>;\n  getLowStockProducts(companyId: string, threshold: number): Promise<Product[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const [user] = await db\n      .insert(users)\n      .values({ ...insertUser, id })\n      .returning();\n    return user;\n  }\n\n  async getCompanyByUserId(userId: string): Promise<Company | undefined> {\n    const [company] = await db.select().from(companies).where(eq(companies.userId, userId));\n    return company || undefined;\n  }\n\n  async createCompany(insertCompany: InsertCompany): Promise<Company> {\n    const id = randomUUID();\n    const [company] = await db\n      .insert(companies)\n      .values({ ...insertCompany, id })\n      .returning();\n    return company;\n  }\n\n  async updateCompany(id: string, company: Partial<InsertCompany>): Promise<Company> {\n    const [updated] = await db\n      .update(companies)\n      .set(company)\n      .where(eq(companies.id, id))\n      .returning();\n    return updated;\n  }\n\n  async getCustomersByCompanyId(companyId: string): Promise<Customer[]> {\n    return await db.select().from(customers).where(eq(customers.companyId, companyId)).orderBy(asc(customers.name));\n  }\n\n  async getCustomer(id: string): Promise<Customer | undefined> {\n    const [customer] = await db.select().from(customers).where(eq(customers.id, id));\n    return customer || undefined;\n  }\n\n  async createCustomer(insertCustomer: InsertCustomer): Promise<Customer> {\n    const id = randomUUID();\n    const [customer] = await db\n      .insert(customers)\n      .values({ ...insertCustomer, id })\n      .returning();\n    return customer;\n  }\n\n  async updateCustomer(id: string, customer: Partial<InsertCustomer>): Promise<Customer> {\n    const [updated] = await db\n      .update(customers)\n      .set(customer)\n      .where(eq(customers.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteCustomer(id: string): Promise<void> {\n    await db.delete(customers).where(eq(customers.id, id));\n  }\n\n  async getProductsByCompanyId(companyId: string): Promise<Product[]> {\n    return await db.select().from(products).where(eq(products.companyId, companyId)).orderBy(asc(products.name));\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product || undefined;\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const id = randomUUID();\n    const [product] = await db\n      .insert(products)\n      .values({ ...insertProduct, id })\n      .returning();\n    return product;\n  }\n\n  async updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product> {\n    const [updated] = await db\n      .update(products)\n      .set(product)\n      .where(eq(products.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    await db.delete(products).where(eq(products.id, id));\n  }\n\n  async getInvoicesByCompanyId(companyId: string): Promise<Invoice[]> {\n    return await db.select().from(invoices).where(eq(invoices.companyId, companyId)).orderBy(desc(invoices.createdAt));\n  }\n\n  async getInvoice(id: string): Promise<Invoice | undefined> {\n    const [invoice] = await db.select().from(invoices).where(eq(invoices.id, id));\n    return invoice || undefined;\n  }\n\n  async getInvoiceWithItems(id: string): Promise<(Invoice & { items: InvoiceItem[]; customer: Customer }) | undefined> {\n    const [invoice] = await db.select().from(invoices).where(eq(invoices.id, id));\n    if (!invoice) return undefined;\n\n    const items = await db.select().from(invoiceItems).where(eq(invoiceItems.invoiceId, id));\n    const [customer] = await db.select().from(customers).where(eq(customers.id, invoice.customerId));\n\n    return { ...invoice, items, customer };\n  }\n\n  async createInvoice(invoice: InsertInvoice, items: InsertInvoiceItem[]): Promise<Invoice> {\n    const id = randomUUID();\n    \n    // Start transaction\n    const [newInvoice] = await db\n      .insert(invoices)\n      .values({ ...invoice, id })\n      .returning();\n\n    // Insert invoice items\n    for (const item of items) {\n      await db.insert(invoiceItems).values({ ...item, id: randomUUID(), invoiceId: id });\n    }\n\n    // Update stock quantities if invoice is issued\n    if (invoice.status === \"issued\") {\n      for (const item of items) {\n        await db\n          .update(products)\n          .set({ stockQty: sql`stock_qty - ${item.qty}` })\n          .where(eq(products.id, item.productId));\n      }\n    }\n\n    return newInvoice;\n  }\n\n  async updateInvoice(id: string, invoice: Partial<InsertInvoice>): Promise<Invoice> {\n    const [updated] = await db\n      .update(invoices)\n      .set(invoice)\n      .where(eq(invoices.id, id))\n      .returning();\n    return updated;\n  }\n\n  async generateInvoiceNumber(companyId: string): Promise<string> {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = now.getMonth() + 1;\n    \n    // Try to get existing counter\n    const [counter] = await db\n      .select()\n      .from(counters)\n      .where(and(\n        eq(counters.name, \"invoice\"),\n        eq(counters.year, year),\n        eq(counters.month, month)\n      ));\n\n    let sequence: number;\n    \n    if (counter) {\n      // Update existing counter\n      sequence = counter.sequence + 1;\n      await db\n        .update(counters)\n        .set({ sequence })\n        .where(eq(counters.id, counter.id));\n    } else {\n      // Create new counter\n      sequence = 1;\n      await db.insert(counters).values({\n        id: randomUUID(),\n        name: \"invoice\",\n        year,\n        month,\n        sequence,\n      });\n    }\n\n    const monthPadded = month.toString().padStart(2, \"0\");\n    const sequencePadded = sequence.toString().padStart(3, \"0\");\n    \n    return `INV-${year}${monthPadded}-${sequencePadded}`;\n  }\n\n  async getPaymentsByInvoiceId(invoiceId: string): Promise<Payment[]> {\n    return await db.select().from(payments).where(eq(payments.invoiceId, invoiceId)).orderBy(desc(payments.paidAt));\n  }\n\n  async createPayment(insertPayment: InsertPayment): Promise<Payment> {\n    const id = randomUUID();\n    const [payment] = await db\n      .insert(payments)\n      .values({ ...insertPayment, id })\n      .returning();\n\n    // Check if invoice is fully paid\n    const totalPaid = await db\n      .select({ total: sum(payments.amount) })\n      .from(payments)\n      .where(eq(payments.invoiceId, insertPayment.invoiceId));\n\n    const [invoice] = await db.select().from(invoices).where(eq(invoices.id, insertPayment.invoiceId));\n    \n    if (invoice && totalPaid[0]?.total && Number(totalPaid[0].total) >= Number(invoice.total)) {\n      await db\n        .update(invoices)\n        .set({ status: \"paid\" })\n        .where(eq(invoices.id, insertPayment.invoiceId));\n    }\n\n    return payment;\n  }\n\n  async getExpensesByCompanyId(companyId: string): Promise<Expense[]> {\n    return await db.select().from(expenses).where(eq(expenses.companyId, companyId)).orderBy(desc(expenses.date));\n  }\n\n  async createExpense(insertExpense: InsertExpense): Promise<Expense> {\n    const id = randomUUID();\n    const [expense] = await db\n      .insert(expenses)\n      .values({ ...insertExpense, id })\n      .returning();\n    return expense;\n  }\n\n  async updateExpense(id: string, expense: Partial<InsertExpense>): Promise<Expense> {\n    const [updated] = await db\n      .update(expenses)\n      .set(expense)\n      .where(eq(expenses.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteExpense(id: string): Promise<void> {\n    await db.delete(expenses).where(eq(expenses.id, id));\n  }\n\n  async getDashboardMetrics(companyId: string, fromDate: Date, toDate: Date): Promise<{\n    revenue: number;\n    outstanding: number;\n    expenses: number;\n    profit: number;\n  }> {\n    // Revenue from paid invoices\n    const revenueResult = await db\n      .select({ total: sum(invoices.total) })\n      .from(invoices)\n      .where(and(\n        eq(invoices.companyId, companyId),\n        eq(invoices.status, \"paid\"),\n        gte(invoices.date, fromDate),\n        lte(invoices.date, toDate)\n      ));\n\n    // Outstanding amount from issued invoices\n    const outstandingResult = await db\n      .select({ total: sum(invoices.total) })\n      .from(invoices)\n      .where(and(\n        eq(invoices.companyId, companyId),\n        eq(invoices.status, \"issued\")\n      ));\n\n    // Total expenses\n    const expensesResult = await db\n      .select({ total: sum(expenses.amount) })\n      .from(expenses)\n      .where(and(\n        eq(expenses.companyId, companyId),\n        gte(expenses.date, fromDate),\n        lte(expenses.date, toDate)\n      ));\n\n    const revenue = Number(revenueResult[0]?.total || 0);\n    const outstanding = Number(outstandingResult[0]?.total || 0);\n    const expensesTotal = Number(expensesResult[0]?.total || 0);\n    const profit = revenue - expensesTotal;\n\n    return { revenue, outstanding, expenses: expensesTotal, profit };\n  }\n\n  async getProfitLoss(companyId: string, fromDate: Date, toDate: Date): Promise<{\n    revenue: number;\n    cogs: number;\n    expenses: number;\n    grossProfit: number;\n    netProfit: number;\n  }> {\n    // Revenue from paid invoices\n    const revenueResult = await db\n      .select({ total: sum(invoices.total) })\n      .from(invoices)\n      .where(and(\n        eq(invoices.companyId, companyId),\n        eq(invoices.status, \"paid\"),\n        gte(invoices.date, fromDate),\n        lte(invoices.date, toDate)\n      ));\n\n    // COGS calculation (cost of sold products)\n    const cogsResult = await db\n      .select({\n        total: sql<number>`SUM(${invoiceItems.qty} * ${products.costDecimal})`\n      })\n      .from(invoiceItems)\n      .innerJoin(invoices, eq(invoiceItems.invoiceId, invoices.id))\n      .innerJoin(products, eq(invoiceItems.productId, products.id))\n      .where(and(\n        eq(invoices.companyId, companyId),\n        eq(invoices.status, \"paid\"),\n        gte(invoices.date, fromDate),\n        lte(invoices.date, toDate)\n      ));\n\n    // Total expenses\n    const expensesResult = await db\n      .select({ total: sum(expenses.amount) })\n      .from(expenses)\n      .where(and(\n        eq(expenses.companyId, companyId),\n        gte(expenses.date, fromDate),\n        lte(expenses.date, toDate)\n      ));\n\n    const revenue = Number(revenueResult[0]?.total || 0);\n    const cogs = Number(cogsResult[0]?.total || 0);\n    const expensesTotal = Number(expensesResult[0]?.total || 0);\n    const grossProfit = revenue - cogs;\n    const netProfit = grossProfit - expensesTotal;\n\n    return { revenue, cogs, expenses: expensesTotal, grossProfit, netProfit };\n  }\n\n  async getLowStockProducts(companyId: string, threshold: number = 5): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(and(\n        eq(products.companyId, companyId),\n        lte(products.stockQty, threshold)\n      ))\n      .orderBy(asc(products.stockQty));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":14378},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { relations } from \"drizzle-orm\";\nimport { pgTable, varchar, text, decimal, integer, timestamp, boolean, pgEnum } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const roleEnum = pgEnum(\"role\", [\"admin\"]);\nexport const invoiceStatusEnum = pgEnum(\"invoice_status\", [\"draft\", \"issued\", \"paid\", \"cancelled\"]);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey(),\n  email: varchar(\"email\", { length: 255 }).notNull().unique(),\n  passwordHash: text(\"password_hash\").notNull(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  role: roleEnum(\"role\").default(\"admin\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Companies table\nexport const companies = pgTable(\"companies\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey(),\n  userId: varchar(\"user_id\", { length: 36 }).notNull(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  address: text(\"address\"),\n  gstin: varchar(\"gstin\", { length: 15 }),\n  currency: varchar(\"currency\", { length: 3 }).default(\"USD\"),\n  timezone: varchar(\"timezone\", { length: 50 }).default(\"UTC\"),\n  allowNegativeStock: boolean(\"allow_negative_stock\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Customers table\nexport const customers = pgTable(\"customers\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey(),\n  companyId: varchar(\"company_id\", { length: 36 }).notNull(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  email: varchar(\"email\", { length: 255 }),\n  phone: varchar(\"phone\", { length: 20 }),\n  billingAddress: text(\"billing_address\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Products table\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey(),\n  companyId: varchar(\"company_id\", { length: 36 }).notNull(),\n  sku: varchar(\"sku\", { length: 100 }).notNull(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  priceDecimal: decimal(\"price_decimal\", { precision: 14, scale: 2 }).notNull(),\n  costDecimal: decimal(\"cost_decimal\", { precision: 14, scale: 2 }).notNull(),\n  stockQty: integer(\"stock_qty\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Counters for invoice numbering\nexport const counters = pgTable(\"counters\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey(),\n  name: varchar(\"name\", { length: 50 }).notNull(),\n  year: integer(\"year\").notNull(),\n  month: integer(\"month\").notNull(),\n  sequence: integer(\"sequence\").default(0),\n});\n\n// Invoices table\nexport const invoices = pgTable(\"invoices\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey(),\n  companyId: varchar(\"company_id\", { length: 36 }).notNull(),\n  customerId: varchar(\"customer_id\", { length: 36 }).notNull(),\n  invoiceNo: varchar(\"invoice_no\", { length: 50 }).notNull(),\n  date: timestamp(\"date\").notNull(),\n  dueDate: timestamp(\"due_date\").notNull(),\n  status: invoiceStatusEnum(\"status\").default(\"draft\"),\n  subTotal: decimal(\"sub_total\", { precision: 14, scale: 2 }).notNull(),\n  taxTotal: decimal(\"tax_total\", { precision: 14, scale: 2 }).notNull(),\n  total: decimal(\"total\", { precision: 14, scale: 2 }).notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Invoice Items table\nexport const invoiceItems = pgTable(\"invoice_items\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey(),\n  invoiceId: varchar(\"invoice_id\", { length: 36 }).notNull(),\n  productId: varchar(\"product_id\", { length: 36 }).notNull(),\n  description: varchar(\"description\", { length: 255 }).notNull(),\n  qty: integer(\"qty\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 14, scale: 2 }).notNull(),\n  taxRate: decimal(\"tax_rate\", { precision: 5, scale: 2 }).default(\"0.00\"),\n  lineTotal: decimal(\"line_total\", { precision: 14, scale: 2 }).notNull(),\n});\n\n// Payments table\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey(),\n  invoiceId: varchar(\"invoice_id\", { length: 36 }).notNull(),\n  amount: decimal(\"amount\", { precision: 14, scale: 2 }).notNull(),\n  method: varchar(\"method\", { length: 50 }).notNull(),\n  paidAt: timestamp(\"paid_at\").notNull(),\n  reference: varchar(\"reference\", { length: 255 }),\n});\n\n// Expenses table\nexport const expenses = pgTable(\"expenses\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey(),\n  companyId: varchar(\"company_id\", { length: 36 }).notNull(),\n  vendor: varchar(\"vendor\", { length: 255 }).notNull(),\n  amount: decimal(\"amount\", { precision: 14, scale: 2 }).notNull(),\n  category: varchar(\"category\", { length: 100 }).notNull(),\n  date: timestamp(\"date\").notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const userRelations = relations(users, ({ one }) => ({\n  company: one(companies, {\n    fields: [users.id],\n    references: [companies.userId],\n  }),\n}));\n\nexport const companyRelations = relations(companies, ({ one, many }) => ({\n  user: one(users, {\n    fields: [companies.userId],\n    references: [users.id],\n  }),\n  customers: many(customers),\n  products: many(products),\n  invoices: many(invoices),\n  expenses: many(expenses),\n}));\n\nexport const customerRelations = relations(customers, ({ one, many }) => ({\n  company: one(companies, {\n    fields: [customers.companyId],\n    references: [companies.id],\n  }),\n  invoices: many(invoices),\n}));\n\nexport const productRelations = relations(products, ({ one, many }) => ({\n  company: one(companies, {\n    fields: [products.companyId],\n    references: [companies.id],\n  }),\n  invoiceItems: many(invoiceItems),\n}));\n\nexport const invoiceRelations = relations(invoices, ({ one, many }) => ({\n  company: one(companies, {\n    fields: [invoices.companyId],\n    references: [companies.id],\n  }),\n  customer: one(customers, {\n    fields: [invoices.customerId],\n    references: [customers.id],\n  }),\n  items: many(invoiceItems),\n  payments: many(payments),\n}));\n\nexport const invoiceItemRelations = relations(invoiceItems, ({ one }) => ({\n  invoice: one(invoices, {\n    fields: [invoiceItems.invoiceId],\n    references: [invoices.id],\n  }),\n  product: one(products, {\n    fields: [invoiceItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const paymentRelations = relations(payments, ({ one }) => ({\n  invoice: one(invoices, {\n    fields: [payments.invoiceId],\n    references: [invoices.id],\n  }),\n}));\n\nexport const expenseRelations = relations(expenses, ({ one }) => ({\n  company: one(companies, {\n    fields: [expenses.companyId],\n    references: [companies.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertCompanySchema = createInsertSchema(companies).omit({ id: true, createdAt: true });\nexport const insertCustomerSchema = createInsertSchema(customers).omit({ id: true, createdAt: true });\nexport const insertProductSchema = createInsertSchema(products).omit({ id: true, createdAt: true });\nexport const insertInvoiceSchema = createInsertSchema(invoices).omit({ id: true, createdAt: true });\nexport const insertInvoiceItemSchema = createInsertSchema(invoiceItems).omit({ id: true });\nexport const insertPaymentSchema = createInsertSchema(payments).omit({ id: true });\nexport const insertExpenseSchema = createInsertSchema(expenses).omit({ id: true, createdAt: true });\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Company = typeof companies.$inferSelect;\nexport type InsertCompany = z.infer<typeof insertCompanySchema>;\nexport type Customer = typeof customers.$inferSelect;\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Invoice = typeof invoices.$inferSelect;\nexport type InsertInvoice = z.infer<typeof insertInvoiceSchema>;\nexport type InvoiceItem = typeof invoiceItems.$inferSelect;\nexport type InsertInvoiceItem = z.infer<typeof insertInvoiceItemSchema>;\nexport type Payment = typeof payments.$inferSelect;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\nexport type Expense = typeof expenses.$inferSelect;\nexport type InsertExpense = z.infer<typeof insertExpenseSchema>;\n","size_bytes":8461},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"./hooks/use-auth\";\nimport AppLayout from \"./components/layout/app-layout\";\nimport Login from \"./pages/login\";\nimport Signup from \"./pages/signup\";\nimport Dashboard from \"./pages/dashboard\";\nimport Customers from \"./pages/customers\";\nimport Products from \"./pages/products\";\nimport Invoices from \"./pages/invoices\";\nimport Expenses from \"./pages/expenses\";\nimport Reports from \"./pages/reports\";\nimport Settings from \"./pages/settings\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/signup\" component={Signup} />\n      <Route path=\"/\">\n        <AppLayout>\n          <Switch>\n            <Route path=\"/\" component={Dashboard} />\n            <Route path=\"/dashboard\" component={Dashboard} />\n            <Route path=\"/customers\" component={Customers} />\n            <Route path=\"/products\" component={Products} />\n            <Route path=\"/invoices\" component={Invoices} />\n            <Route path=\"/expenses\" component={Expenses} />\n            <Route path=\"/reports\" component={Reports} />\n            <Route path=\"/settings\" component={Settings} />\n            <Route component={NotFound} />\n          </Switch>\n        </AppLayout>\n      </Route>\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1838},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/auth.ts":{"content":"import bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport { type User } from \"@shared/schema\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"default_secret\";\nconst JWT_REFRESH_SECRET = process.env.JWT_REFRESH_SECRET || \"default_refresh_secret\";\n\nexport interface TokenPayload {\n  userId: string;\n  email: string;\n}\n\nexport async function hashPassword(password: string): Promise<string> {\n  return await bcrypt.hash(password, 12);\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return await bcrypt.compare(password, hash);\n}\n\nexport function generateTokens(user: User): { accessToken: string; refreshToken: string } {\n  const payload: TokenPayload = {\n    userId: user.id,\n    email: user.email,\n  };\n\n  const accessToken = jwt.sign(payload, JWT_SECRET, { expiresIn: \"15m\" });\n  const refreshToken = jwt.sign(payload, JWT_REFRESH_SECRET, { expiresIn: \"7d\" });\n\n  return { accessToken, refreshToken };\n}\n\nexport function verifyAccessToken(token: string): TokenPayload | null {\n  try {\n    return jwt.verify(token, JWT_SECRET) as TokenPayload;\n  } catch {\n    return null;\n  }\n}\n\nexport function verifyRefreshToken(token: string): TokenPayload | null {\n  try {\n    return jwt.verify(token, JWT_REFRESH_SECRET) as TokenPayload;\n  } catch {\n    return null;\n  }\n}\n","size_bytes":1317},"server/services/pdf.ts":{"content":"import puppeteer from \"puppeteer\";\nimport { type Invoice, type InvoiceItem, type Customer, type Company } from \"@shared/schema\";\n\nexport interface InvoiceData {\n  invoice: Invoice;\n  items: InvoiceItem[];\n  customer: Customer;\n  company: Company;\n}\n\nexport async function generateInvoicePDF(data: InvoiceData): Promise<Buffer> {\n  const html = generateInvoiceHTML(data);\n  \n  const browser = await puppeteer.launch({\n    headless: true,\n    args: ['--no-sandbox', '--disable-setuid-sandbox']\n  });\n  \n  try {\n    const page = await browser.newPage();\n    await page.setContent(html, { waitUntil: 'networkidle0' });\n    \n    const pdf = await page.pdf({\n      format: 'A4',\n      printBackground: true,\n      margin: {\n        top: '20px',\n        right: '20px',\n        bottom: '20px',\n        left: '20px'\n      }\n    });\n    \n    return Buffer.from(pdf);\n  } finally {\n    await browser.close();\n  }\n}\n\nfunction generateInvoiceHTML(data: InvoiceData): string {\n  const { invoice, items, customer, company } = data;\n  \n  return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Invoice ${invoice.invoiceNo}</title>\n      <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; color: #333; }\n        .header { display: flex; justify-content: space-between; margin-bottom: 30px; }\n        .company-info h1 { margin: 0; color: #2563eb; }\n        .invoice-info { text-align: right; }\n        .invoice-number { font-size: 24px; font-weight: bold; color: #2563eb; }\n        .billing-section { display: flex; justify-content: space-between; margin-bottom: 30px; }\n        .billing-info { width: 45%; }\n        .billing-info h3 { margin-top: 0; color: #374151; border-bottom: 2px solid #e5e7eb; padding-bottom: 5px; }\n        table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }\n        th, td { padding: 12px; text-align: left; border-bottom: 1px solid #e5e7eb; }\n        th { background-color: #f9fafb; font-weight: 600; color: #374151; }\n        .amount { text-align: right; }\n        .totals { margin-left: auto; width: 300px; }\n        .totals table { margin-bottom: 0; }\n        .total-row { font-weight: bold; font-size: 18px; background-color: #f3f4f6; }\n        .status { display: inline-block; padding: 4px 12px; border-radius: 6px; font-size: 12px; font-weight: 600; text-transform: uppercase; }\n        .status.paid { background-color: #d1fae5; color: #065f46; }\n        .status.issued { background-color: #fef3c7; color: #92400e; }\n        .status.draft { background-color: #e0e7ff; color: #3730a3; }\n      </style>\n    </head>\n    <body>\n      <div class=\"header\">\n        <div class=\"company-info\">\n          <h1>${company.name}</h1>\n          <p>${company.address || ''}</p>\n          ${company.gstin ? `<p>GSTIN: ${company.gstin}</p>` : ''}\n        </div>\n        <div class=\"invoice-info\">\n          <div class=\"invoice-number\">${invoice.invoiceNo}</div>\n          <span class=\"status ${invoice.status}\">${invoice.status}</span>\n        </div>\n      </div>\n\n      <div class=\"billing-section\">\n        <div class=\"billing-info\">\n          <h3>Bill To</h3>\n          <p><strong>${customer.name}</strong></p>\n          ${customer.email ? `<p>${customer.email}</p>` : ''}\n          ${customer.phone ? `<p>${customer.phone}</p>` : ''}\n          ${customer.billingAddress ? `<p>${customer.billingAddress}</p>` : ''}\n        </div>\n        <div class=\"billing-info\">\n          <h3>Invoice Details</h3>\n          <p><strong>Date:</strong> ${new Date(invoice.date).toLocaleDateString()}</p>\n          <p><strong>Due Date:</strong> ${new Date(invoice.dueDate).toLocaleDateString()}</p>\n          <p><strong>Currency:</strong> ${company.currency}</p>\n        </div>\n      </div>\n\n      <table>\n        <thead>\n          <tr>\n            <th>Description</th>\n            <th>Qty</th>\n            <th class=\"amount\">Unit Price</th>\n            <th class=\"amount\">Tax Rate</th>\n            <th class=\"amount\">Total</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${items.map(item => `\n            <tr>\n              <td>${item.description}</td>\n              <td>${item.qty}</td>\n              <td class=\"amount\">${formatCurrency(Number(item.unitPrice), company.currency)}</td>\n              <td class=\"amount\">${item.taxRate}%</td>\n              <td class=\"amount\">${formatCurrency(Number(item.lineTotal), company.currency)}</td>\n            </tr>\n          `).join('')}\n        </tbody>\n      </table>\n\n      <div class=\"totals\">\n        <table>\n          <tr>\n            <td>Subtotal:</td>\n            <td class=\"amount\">${formatCurrency(Number(invoice.subTotal), company.currency)}</td>\n          </tr>\n          <tr>\n            <td>Tax:</td>\n            <td class=\"amount\">${formatCurrency(Number(invoice.taxTotal), company.currency)}</td>\n          </tr>\n          <tr class=\"total-row\">\n            <td>Total:</td>\n            <td class=\"amount\">${formatCurrency(Number(invoice.total), company.currency)}</td>\n          </tr>\n        </table>\n      </div>\n\n      ${invoice.notes ? `\n        <div style=\"margin-top: 30px;\">\n          <h3>Notes</h3>\n          <p>${invoice.notes}</p>\n        </div>\n      ` : ''}\n    </body>\n    </html>\n  `;\n}\n\nfunction formatCurrency(amount: number, currency: string): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: currency,\n  }).format(amount);\n}\n","size_bytes":5426},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface AuthContextType {\n  user: any;\n  company: any;\n  login: (email: string, password: string) => Promise<void>;\n  signup: (data: { email: string; password: string; name: string; companyName: string }) => Promise<void>;\n  logout: () => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [tokens, setTokens] = useState<{ accessToken: string; refreshToken: string } | null>(null);\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    const storedTokens = localStorage.getItem(\"tokens\");\n    if (storedTokens) {\n      setTokens(JSON.parse(storedTokens));\n    }\n  }, []);\n\n  // Set auth header for API requests\n  useEffect(() => {\n    if (tokens?.accessToken) {\n      // Update API client with auth header\n      queryClient.setDefaultOptions({\n        queries: {\n          retry: false,\n          refetchOnWindowFocus: false,\n        },\n      });\n    }\n  }, [tokens, queryClient]);\n\n  const { data: profile, isLoading } = useQuery({\n    queryKey: [\"/api/user/profile\"],\n    enabled: !!tokens?.accessToken,\n    queryFn: async () => {\n      const res = await fetch(\"/api/user/profile\", {\n        headers: {\n          Authorization: `Bearer ${tokens?.accessToken}`,\n        },\n      });\n      if (!res.ok) throw new Error(\"Failed to fetch profile\");\n      return res.json();\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async ({ email, password }: { email: string; password: string }) => {\n      const res = await apiRequest(\"POST\", \"/api/auth/login\", { email, password });\n      return res.json();\n    },\n    onSuccess: (data) => {\n      setTokens(data);\n      localStorage.setItem(\"tokens\", JSON.stringify(data));\n      queryClient.invalidateQueries();\n      setLocation(\"/\");\n    },\n  });\n\n  const signupMutation = useMutation({\n    mutationFn: async (data: { email: string; password: string; name: string; companyName: string }) => {\n      const res = await apiRequest(\"POST\", \"/api/auth/signup\", data);\n      return res.json();\n    },\n    onSuccess: (data) => {\n      setTokens(data);\n      localStorage.setItem(\"tokens\", JSON.stringify(data));\n      queryClient.invalidateQueries();\n      setLocation(\"/\");\n    },\n  });\n\n  const logout = () => {\n    setTokens(null);\n    localStorage.removeItem(\"tokens\");\n    queryClient.clear();\n    setLocation(\"/login\");\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: profile?.user,\n        company: profile?.company,\n        login: loginMutation.mutateAsync,\n        signup: signupMutation.mutateAsync,\n        logout,\n        isLoading: isLoading || loginMutation.isPending || signupMutation.isPending,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3287},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"export async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown,\n  options: RequestInit = {}\n): Promise<Response> {\n  const tokens = localStorage.getItem(\"tokens\");\n  const auth = tokens ? JSON.parse(tokens) : null;\n\n  const headers: HeadersInit = {\n    \"Content-Type\": \"application/json\",\n    ...options.headers,\n  };\n\n  if (auth?.accessToken) {\n    headers.Authorization = `Bearer ${auth.accessToken}`;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    ...options,\n  });\n\n  if (!res.ok) {\n    const error = await res.text();\n    throw new Error(error || res.statusText);\n  }\n\n  return res;\n}\n","size_bytes":682},"client/src/lib/auth.ts":{"content":"export function getAuthToken(): string | null {\n  const tokens = localStorage.getItem(\"tokens\");\n  if (!tokens) return null;\n  \n  try {\n    const parsed = JSON.parse(tokens);\n    return parsed.accessToken;\n  } catch {\n    return null;\n  }\n}\n\nexport function setAuthTokens(tokens: { accessToken: string; refreshToken: string }): void {\n  localStorage.setItem(\"tokens\", JSON.stringify(tokens));\n}\n\nexport function clearAuthTokens(): void {\n  localStorage.removeItem(\"tokens\");\n}\n","size_bytes":477},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function formatCurrency(amount: number, currency: string = \"USD\"): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: currency,\n  }).format(amount);\n}\n","size_bytes":362},"client/src/pages/customers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Plus, Edit, Trash2, Mail, Phone } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst customerSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Invalid email\").optional().or(z.literal(\"\")),\n  phone: z.string().optional(),\n  billingAddress: z.string().optional(),\n});\n\ntype CustomerForm = z.infer<typeof customerSchema>;\n\nexport default function Customers() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingCustomer, setEditingCustomer] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: customers, isLoading } = useQuery({\n    queryKey: [\"/api/customers\"],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", \"/api/customers\");\n      return res.json();\n    },\n  });\n\n  const form = useForm<CustomerForm>({\n    resolver: zodResolver(customerSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      billingAddress: \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: CustomerForm) => {\n      const res = await apiRequest(\"POST\", \"/api/customers\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      setIsDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Customer created successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: CustomerForm }) => {\n      const res = await apiRequest(\"PUT\", `/api/customers/${id}`, data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      setIsDialogOpen(false);\n      setEditingCustomer(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Customer updated successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/customers/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      toast({\n        title: \"Success\",\n        description: \"Customer deleted successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CustomerForm) => {\n    if (editingCustomer) {\n      updateMutation.mutate({ id: editingCustomer.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (customer: any) => {\n    setEditingCustomer(customer);\n    form.reset(customer);\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this customer?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleOpenDialog = () => {\n    setEditingCustomer(null);\n    form.reset();\n    setIsDialogOpen(true);\n  };\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-slate-800\">Customers</h1>\n          <p className=\"text-slate-600 mt-2\">Manage your customer information</p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={handleOpenDialog}>\n              <Plus className=\"mr-2 w-4 h-4\" />\n              Add Customer\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[425px]\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingCustomer ? \"Edit Customer\" : \"Add New Customer\"}\n              </DialogTitle>\n              <DialogDescription>\n                {editingCustomer \n                  ? \"Update customer information below.\"\n                  : \"Fill in the customer details below.\"\n                }\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Name *</Label>\n                <Input\n                  id=\"name\"\n                  {...form.register(\"name\")}\n                />\n                {form.formState.errors.name && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.name.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  {...form.register(\"email\")}\n                />\n                {form.formState.errors.email && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.email.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Phone</Label>\n                <Input\n                  id=\"phone\"\n                  {...form.register(\"phone\")}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"billingAddress\">Billing Address</Label>\n                <Textarea\n                  id=\"billingAddress\"\n                  {...form.register(\"billingAddress\")}\n                />\n              </div>\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createMutation.isPending || updateMutation.isPending}\n                >\n                  {createMutation.isPending || updateMutation.isPending \n                    ? \"Saving...\" \n                    : editingCustomer ? \"Update\" : \"Create\"\n                  }\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>All Customers</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"animate-pulse\">\n              <div className=\"h-4 bg-slate-200 rounded w-full mb-4\"></div>\n              <div className=\"h-4 bg-slate-200 rounded w-3/4 mb-4\"></div>\n              <div className=\"h-4 bg-slate-200 rounded w-1/2\"></div>\n            </div>\n          ) : customers && customers.length > 0 ? (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Contact</TableHead>\n                  <TableHead>Address</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {customers.map((customer: any) => (\n                  <TableRow key={customer.id}>\n                    <TableCell className=\"font-medium\">{customer.name}</TableCell>\n                    <TableCell>\n                      <div className=\"space-y-1\">\n                        {customer.email && (\n                          <div className=\"flex items-center text-sm text-slate-600\">\n                            <Mail className=\"w-3 h-3 mr-1\" />\n                            {customer.email}\n                          </div>\n                        )}\n                        {customer.phone && (\n                          <div className=\"flex items-center text-sm text-slate-600\">\n                            <Phone className=\"w-3 h-3 mr-1\" />\n                            {customer.phone}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm text-slate-600 max-w-xs truncate\">\n                        {customer.billingAddress || \"—\"}\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(customer)}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(customer.id)}\n                          disabled={deleteMutation.isPending}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          ) : (\n            <div className=\"text-center py-12\">\n              <div className=\"w-16 h-16 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Plus className=\"w-8 h-8 text-slate-400\" />\n              </div>\n              <h3 className=\"text-lg font-medium text-slate-800 mb-2\">No customers yet</h3>\n              <p className=\"text-slate-600 mb-4\">Get started by adding your first customer.</p>\n              <Button onClick={handleOpenDialog}>\n                <Plus className=\"mr-2 w-4 h-4\" />\n                Add Customer\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11069},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  DollarSign, \n  FileText, \n  Receipt, \n  TrendingUp, \n  TrendingDown,\n  Clock,\n  AlertTriangle,\n  Plus,\n  Users,\n  Package,\n  ChevronRight,\n  ArrowUp,\n  ArrowDown\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/api\";\nimport { formatCurrency } from \"@/lib/utils\";\nimport InvoiceModal from \"@/components/invoices/invoice-modal\";\n\nexport default function Dashboard() {\n  const [isInvoiceModalOpen, setIsInvoiceModalOpen] = useState(false);\n\n  const { data: analytics, isLoading: analyticsLoading } = useQuery({\n    queryKey: [\"/api/analytics/dashboard\"],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", \"/api/analytics/dashboard\");\n      return res.json();\n    },\n  });\n\n  const { data: recentInvoices, isLoading: invoicesLoading } = useQuery({\n    queryKey: [\"/api/invoices\"],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", \"/api/invoices\");\n      const invoices = await res.json();\n      return invoices.slice(0, 4); // Get latest 4 invoices\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"paid\":\n        return \"bg-emerald-100 text-emerald-800\";\n      case \"issued\":\n        return \"bg-amber-100 text-amber-800\";\n      case \"draft\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"cancelled\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-slate-100 text-slate-800\";\n    }\n  };\n\n  if (analyticsLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-slate-200 rounded w-1/4 mb-4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-slate-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"p-6\">\n        {/* Page Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-slate-800\">Dashboard</h1>\n          <p className=\"text-slate-600 mt-2\">Welcome back! Here's what's happening with your business today.</p>\n        </div>\n\n        {/* Key Metrics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-slate-600 text-sm font-medium\">Total Revenue (30d)</p>\n                  <p className=\"text-2xl font-bold text-slate-800 mt-2\">\n                    {formatCurrency(analytics?.revenue || 0, \"USD\")}\n                  </p>\n                  <div className=\"flex items-center mt-2\">\n                    <ArrowUp className=\"text-emerald-500 w-4 h-4 mr-1\" />\n                    <span className=\"text-emerald-500 text-sm font-medium\">12.5%</span>\n                    <span className=\"text-slate-500 text-sm ml-1\">vs last month</span>\n                  </div>\n                </div>\n                <div className=\"w-12 h-12 bg-emerald-100 rounded-lg flex items-center justify-center\">\n                  <DollarSign className=\"text-emerald-600 w-6 h-6\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-slate-600 text-sm font-medium\">Outstanding</p>\n                  <p className=\"text-2xl font-bold text-slate-800 mt-2\">\n                    {formatCurrency(analytics?.outstanding || 0, \"USD\")}\n                  </p>\n                  <div className=\"flex items-center mt-2\">\n                    <Clock className=\"text-amber-500 w-4 h-4 mr-1\" />\n                    <span className=\"text-amber-500 text-sm font-medium\">6 invoices</span>\n                    <span className=\"text-slate-500 text-sm ml-1\">pending</span>\n                  </div>\n                </div>\n                <div className=\"w-12 h-12 bg-amber-100 rounded-lg flex items-center justify-center\">\n                  <FileText className=\"text-amber-600 w-6 h-6\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-slate-600 text-sm font-medium\">Expenses (30d)</p>\n                  <p className=\"text-2xl font-bold text-slate-800 mt-2\">\n                    {formatCurrency(analytics?.expenses || 0, \"USD\")}\n                  </p>\n                  <div className=\"flex items-center mt-2\">\n                    <ArrowDown className=\"text-red-500 w-4 h-4 mr-1\" />\n                    <span className=\"text-red-500 text-sm font-medium\">8.2%</span>\n                    <span className=\"text-slate-500 text-sm ml-1\">vs last month</span>\n                  </div>\n                </div>\n                <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n                  <Receipt className=\"text-red-600 w-6 h-6\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-slate-600 text-sm font-medium\">Net Profit (30d)</p>\n                  <p className=\"text-2xl font-bold text-slate-800 mt-2\">\n                    {formatCurrency(analytics?.profit || 0, \"USD\")}\n                  </p>\n                  <div className=\"flex items-center mt-2\">\n                    <ArrowUp className=\"text-emerald-500 w-4 h-4 mr-1\" />\n                    <span className=\"text-emerald-500 text-sm font-medium\">15.8%</span>\n                    <span className=\"text-slate-500 text-sm ml-1\">vs last month</span>\n                  </div>\n                </div>\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"text-blue-600 w-6 h-6\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          \n          {/* Recent Invoices */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Recent Invoices</CardTitle>\n                  <Button variant=\"ghost\" size=\"sm\">View All</Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {invoicesLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(4)].map((_, i) => (\n                      <div key={i} className=\"animate-pulse\">\n                        <div className=\"h-16 bg-slate-200 rounded\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : recentInvoices && recentInvoices.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {recentInvoices.map((invoice: any) => (\n                      <div key={invoice.id} className=\"flex items-center justify-between py-3 border-b border-slate-100 last:border-b-0\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-10 h-10 bg-slate-100 rounded-lg flex items-center justify-center\">\n                            <FileText className=\"text-slate-600 w-5 h-5\" />\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-slate-800\">{invoice.invoiceNo}</p>\n                            <p className=\"text-sm text-slate-600\">{invoice.customerName || \"Customer\"}</p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-medium text-slate-800\">\n                            {formatCurrency(Number(invoice.total), \"USD\")}\n                          </p>\n                          <Badge className={getStatusColor(invoice.status)}>\n                            {invoice.status}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <FileText className=\"w-12 h-12 text-slate-400 mx-auto mb-4\" />\n                    <p className=\"text-slate-600\">No invoices yet</p>\n                    <Button \n                      className=\"mt-4\"\n                      onClick={() => setIsInvoiceModalOpen(true)}\n                    >\n                      Create your first invoice\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Sidebar */}\n          <div className=\"space-y-6\">\n            \n            {/* Low Stock Alert */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Low Stock Alerts</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {analytics?.lowStockProducts && analytics.lowStockProducts.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {analytics.lowStockProducts.slice(0, 3).map((product: any) => (\n                      <div key={product.id} className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"font-medium text-slate-800\">{product.name}</p>\n                          <p className=\"text-sm text-slate-600\">SKU: {product.sku}</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <span className=\"text-red-600 font-medium\">{product.stockQty} left</span>\n                          <p className=\"text-xs text-slate-500\">Min: 5</p>\n                        </div>\n                      </div>\n                    ))}\n                    <Button variant=\"outline\" className=\"w-full\">\n                      Restock Items\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-4\">\n                    <p className=\"text-slate-600 text-sm\">All products are well stocked</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full justify-between\"\n                  onClick={() => setIsInvoiceModalOpen(true)}\n                >\n                  <div className=\"flex items-center\">\n                    <Plus className=\"text-primary w-5 h-5 mr-3\" />\n                    <span>Create Invoice</span>\n                  </div>\n                  <ChevronRight className=\"w-4 h-4\" />\n                </Button>\n                \n                <Button variant=\"ghost\" className=\"w-full justify-between\">\n                  <div className=\"flex items-center\">\n                    <Users className=\"text-primary w-5 h-5 mr-3\" />\n                    <span>Add Customer</span>\n                  </div>\n                  <ChevronRight className=\"w-4 h-4\" />\n                </Button>\n                \n                <Button variant=\"ghost\" className=\"w-full justify-between\">\n                  <div className=\"flex items-center\">\n                    <Package className=\"text-primary w-5 h-5 mr-3\" />\n                    <span>Add Product</span>\n                  </div>\n                  <ChevronRight className=\"w-4 h-4\" />\n                </Button>\n                \n                <Button variant=\"ghost\" className=\"w-full justify-between\">\n                  <div className=\"flex items-center\">\n                    <Receipt className=\"text-primary w-5 h-5 mr-3\" />\n                    <span>Record Expense</span>\n                  </div>\n                  <ChevronRight className=\"w-4 h-4\" />\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Revenue Chart Placeholder */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Revenue Trend</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-40 bg-slate-50 rounded-lg flex items-center justify-center\">\n                  <div className=\"text-center\">\n                    <TrendingUp className=\"text-slate-400 w-8 h-8 mx-auto mb-2\" />\n                    <p className=\"text-slate-500 text-sm\">Chart will render here</p>\n                    <p className=\"text-xs text-slate-400\">Showing last 30 days</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <InvoiceModal \n        isOpen={isInvoiceModalOpen}\n        onClose={() => setIsInvoiceModalOpen(false)}\n      />\n    </>\n  );\n}\n\nfunction formatCurrency(amount: number, currency: string): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: currency,\n  }).format(amount);\n}\n","size_bytes":13943},"client/src/pages/expenses.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Plus, Edit, Trash2, Receipt, Calendar } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst expenseSchema = z.object({\n  vendor: z.string().min(1, \"Vendor is required\"),\n  amount: z.string().min(1, \"Amount is required\"),\n  category: z.string().min(1, \"Category is required\"),\n  date: z.string().min(1, \"Date is required\"),\n  notes: z.string().optional(),\n});\n\ntype ExpenseForm = z.infer<typeof expenseSchema>;\n\nconst expenseCategories = [\n  \"Office Supplies\",\n  \"Marketing\",\n  \"Travel\",\n  \"Utilities\",\n  \"Software\",\n  \"Equipment\",\n  \"Professional Services\",\n  \"Rent\",\n  \"Other\",\n];\n\nexport default function Expenses() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingExpense, setEditingExpense] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: expenses, isLoading } = useQuery({\n    queryKey: [\"/api/expenses\"],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", \"/api/expenses\");\n      return res.json();\n    },\n  });\n\n  const form = useForm<ExpenseForm>({\n    resolver: zodResolver(expenseSchema),\n    defaultValues: {\n      vendor: \"\",\n      amount: \"\",\n      category: \"\",\n      date: new Date().toISOString().split('T')[0],\n      notes: \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: ExpenseForm) => {\n      const payload = {\n        ...data,\n        amount: parseFloat(data.amount),\n        date: new Date(data.date),\n      };\n      const res = await apiRequest(\"POST\", \"/api/expenses\", payload);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\"] });\n      setIsDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Expense recorded successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: ExpenseForm }) => {\n      const payload = {\n        ...data,\n        amount: parseFloat(data.amount),\n        date: new Date(data.date),\n      };\n      const res = await apiRequest(\"PUT\", `/api/expenses/${id}`, payload);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\"] });\n      setIsDialogOpen(false);\n      setEditingExpense(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Expense updated successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/expenses/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\"] });\n      toast({\n        title: \"Success\",\n        description: \"Expense deleted successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ExpenseForm) => {\n    if (editingExpense) {\n      updateMutation.mutate({ id: editingExpense.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (expense: any) => {\n    setEditingExpense(expense);\n    form.reset({\n      vendor: expense.vendor,\n      amount: expense.amount.toString(),\n      category: expense.category,\n      date: new Date(expense.date).toISOString().split('T')[0],\n      notes: expense.notes || \"\",\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this expense?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleOpenDialog = () => {\n    setEditingExpense(null);\n    form.reset({\n      vendor: \"\",\n      amount: \"\",\n      category: \"\",\n      date: new Date().toISOString().split('T')[0],\n      notes: \"\",\n    });\n    setIsDialogOpen(true);\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(amount);\n  };\n\n  const totalExpenses = expenses?.reduce((sum: number, expense: any) => sum + Number(expense.amount), 0) || 0;\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-slate-800\">Expenses</h1>\n          <p className=\"text-slate-600 mt-2\">Track and manage your business expenses</p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={handleOpenDialog}>\n              <Plus className=\"mr-2 w-4 h-4\" />\n              Add Expense\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[425px]\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingExpense ? \"Edit Expense\" : \"Record New Expense\"}\n              </DialogTitle>\n              <DialogDescription>\n                {editingExpense \n                  ? \"Update expense details below.\"\n                  : \"Fill in the expense details below.\"\n                }\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"vendor\">Vendor/Payee *</Label>\n                <Input\n                  id=\"vendor\"\n                  {...form.register(\"vendor\")}\n                />\n                {form.formState.errors.vendor && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.vendor.message}</p>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"amount\">Amount *</Label>\n                  <Input\n                    id=\"amount\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    {...form.register(\"amount\")}\n                  />\n                  {form.formState.errors.amount && (\n                    <p className=\"text-sm text-red-600\">{form.formState.errors.amount.message}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"date\">Date *</Label>\n                  <Input\n                    id=\"date\"\n                    type=\"date\"\n                    {...form.register(\"date\")}\n                  />\n                  {form.formState.errors.date && (\n                    <p className=\"text-sm text-red-600\">{form.formState.errors.date.message}</p>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"category\">Category *</Label>\n                <select\n                  id=\"category\"\n                  {...form.register(\"category\")}\n                  className=\"w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary\"\n                >\n                  <option value=\"\">Select category...</option>\n                  {expenseCategories.map((category) => (\n                    <option key={category} value={category}>{category}</option>\n                  ))}\n                </select>\n                {form.formState.errors.category && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.category.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"notes\">Notes</Label>\n                <Textarea\n                  id=\"notes\"\n                  {...form.register(\"notes\")}\n                />\n              </div>\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createMutation.isPending || updateMutation.isPending}\n                >\n                  {createMutation.isPending || updateMutation.isPending \n                    ? \"Saving...\" \n                    : editingExpense ? \"Update\" : \"Record\"\n                  }\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Summary Card */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-slate-600 text-sm font-medium\">Total Expenses This Month</p>\n              <p className=\"text-2xl font-bold text-slate-800 mt-2\">\n                {formatCurrency(totalExpenses)}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n              <Receipt className=\"text-red-600 w-6 h-6\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>All Expenses</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"animate-pulse\">\n              <div className=\"h-4 bg-slate-200 rounded w-full mb-4\"></div>\n              <div className=\"h-4 bg-slate-200 rounded w-3/4 mb-4\"></div>\n              <div className=\"h-4 bg-slate-200 rounded w-1/2\"></div>\n            </div>\n          ) : expenses && expenses.length > 0 ? (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Vendor</TableHead>\n                  <TableHead>Category</TableHead>\n                  <TableHead>Amount</TableHead>\n                  <TableHead>Notes</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {expenses.map((expense: any) => (\n                  <TableRow key={expense.id}>\n                    <TableCell>\n                      <div className=\"flex items-center\">\n                        <Calendar className=\"w-4 h-4 mr-2 text-slate-400\" />\n                        {new Date(expense.date).toLocaleDateString()}\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"font-medium\">{expense.vendor}</TableCell>\n                    <TableCell>\n                      <span className=\"px-2 py-1 bg-slate-100 text-slate-700 rounded-md text-sm\">\n                        {expense.category}\n                      </span>\n                    </TableCell>\n                    <TableCell className=\"font-medium\">\n                      {formatCurrency(Number(expense.amount))}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm text-slate-600 max-w-xs truncate\">\n                        {expense.notes || \"—\"}\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(expense)}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(expense.id)}\n                          disabled={deleteMutation.isPending}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          ) : (\n            <div className=\"text-center py-12\">\n              <div className=\"w-16 h-16 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Receipt className=\"w-8 h-8 text-slate-400\" />\n              </div>\n              <h3 className=\"text-lg font-medium text-slate-800 mb-2\">No expenses yet</h3>\n              <p className=\"text-slate-600 mb-4\">Start tracking your business expenses.</p>\n              <Button onClick={handleOpenDialog}>\n                <Plus className=\"mr-2 w-4 h-4\" />\n                Record Expense\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":13991},"client/src/pages/invoices.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Plus, Search, MoreHorizontal, Eye, Edit, Download, Send } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport InvoiceModal from \"@/components/invoices/invoice-modal\";\n\nexport default function Invoices() {\n  const [isInvoiceModalOpen, setIsInvoiceModalOpen] = useState(false);\n  const [editingInvoice, setEditingInvoice] = useState<any>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: invoices, isLoading } = useQuery({\n    queryKey: [\"/api/invoices\"],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", \"/api/invoices\");\n      return res.json();\n    },\n  });\n\n  const { data: customers } = useQuery({\n    queryKey: [\"/api/customers\"],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", \"/api/customers\");\n      return res.json();\n    },\n  });\n\n  const updateInvoiceMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const res = await apiRequest(\"PUT\", `/api/invoices/${id}`, data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      toast({\n        title: \"Success\",\n        description: \"Invoice updated successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"paid\":\n        return \"bg-emerald-100 text-emerald-800\";\n      case \"issued\":\n        return \"bg-amber-100 text-amber-800\";\n      case \"draft\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"cancelled\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-slate-100 text-slate-800\";\n    }\n  };\n\n  const handleEdit = (invoice: any) => {\n    setEditingInvoice(invoice);\n    setIsInvoiceModalOpen(true);\n  };\n\n  const handleStatusUpdate = (id: string, status: string) => {\n    updateInvoiceMutation.mutate({ id, data: { status } });\n  };\n\n  const handleDownloadPDF = async (id: string, invoiceNo: string) => {\n    try {\n      const res = await apiRequest(\"GET\", `/api/invoices/${id}/pdf`);\n      const blob = await res.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.style.display = \"none\";\n      a.href = url;\n      a.download = `invoice-${invoiceNo}.pdf`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      toast({\n        title: \"Success\",\n        description: \"Invoice PDF downloaded successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to download PDF\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleOpenModal = () => {\n    setEditingInvoice(null);\n    setIsInvoiceModalOpen(true);\n  };\n\n  const getCustomerName = (customerId: string) => {\n    const customer = customers?.find((c: any) => c.id === customerId);\n    return customer?.name || \"Unknown Customer\";\n  };\n\n  const filteredInvoices = invoices?.filter((invoice: any) =>\n    invoice.invoiceNo.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    getCustomerName(invoice.customerId).toLowerCase().includes(searchTerm.toLowerCase())\n  ) || [];\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(amount);\n  };\n\n  return (\n    <>\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-slate-800\">Invoices</h1>\n            <p className=\"text-slate-600 mt-2\">Manage your invoices and track payments</p>\n          </div>\n          <Button onClick={handleOpenModal}>\n            <Plus className=\"mr-2 w-4 h-4\" />\n            New Invoice\n          </Button>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>All Invoices</CardTitle>\n              <div className=\"relative max-w-sm\">\n                <Search className=\"absolute left-3 top-2.5 h-4 w-4 text-slate-400\" />\n                <Input\n                  placeholder=\"Search invoices...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-9\"\n                />\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"animate-pulse\">\n                <div className=\"h-4 bg-slate-200 rounded w-full mb-4\"></div>\n                <div className=\"h-4 bg-slate-200 rounded w-3/4 mb-4\"></div>\n                <div className=\"h-4 bg-slate-200 rounded w-1/2\"></div>\n              </div>\n            ) : filteredInvoices.length > 0 ? (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Invoice #</TableHead>\n                    <TableHead>Customer</TableHead>\n                    <TableHead>Date</TableHead>\n                    <TableHead>Due Date</TableHead>\n                    <TableHead>Amount</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredInvoices.map((invoice: any) => (\n                    <TableRow key={invoice.id}>\n                      <TableCell className=\"font-medium\">{invoice.invoiceNo}</TableCell>\n                      <TableCell>{getCustomerName(invoice.customerId)}</TableCell>\n                      <TableCell>{new Date(invoice.date).toLocaleDateString()}</TableCell>\n                      <TableCell>{new Date(invoice.dueDate).toLocaleDateString()}</TableCell>\n                      <TableCell className=\"font-medium\">\n                        {formatCurrency(Number(invoice.total))}\n                      </TableCell>\n                      <TableCell>\n                        <Badge className={getStatusColor(invoice.status)}>\n                          {invoice.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem onClick={() => handleEdit(invoice)}>\n                              <Edit className=\"mr-2 h-4 w-4\" />\n                              Edit\n                            </DropdownMenuItem>\n                            <DropdownMenuItem \n                              onClick={() => handleDownloadPDF(invoice.id, invoice.invoiceNo)}\n                            >\n                              <Download className=\"mr-2 h-4 w-4\" />\n                              Download PDF\n                            </DropdownMenuItem>\n                            {invoice.status === \"draft\" && (\n                              <DropdownMenuItem \n                                onClick={() => handleStatusUpdate(invoice.id, \"issued\")}\n                              >\n                                <Send className=\"mr-2 h-4 w-4\" />\n                                Issue Invoice\n                              </DropdownMenuItem>\n                            )}\n                            {invoice.status === \"issued\" && (\n                              <DropdownMenuItem \n                                onClick={() => handleStatusUpdate(invoice.id, \"paid\")}\n                              >\n                                <Eye className=\"mr-2 h-4 w-4\" />\n                                Mark as Paid\n                              </DropdownMenuItem>\n                            )}\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            ) : (\n              <div className=\"text-center py-12\">\n                <div className=\"w-16 h-16 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Plus className=\"w-8 h-8 text-slate-400\" />\n                </div>\n                <h3 className=\"text-lg font-medium text-slate-800 mb-2\">No invoices yet</h3>\n                <p className=\"text-slate-600 mb-4\">Get started by creating your first invoice.</p>\n                <Button onClick={handleOpenModal}>\n                  <Plus className=\"mr-2 w-4 h-4\" />\n                  Create Invoice\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      <InvoiceModal \n        isOpen={isInvoiceModalOpen}\n        onClose={() => {\n          setIsInvoiceModalOpen(false);\n          setEditingInvoice(null);\n        }}\n        editingInvoice={editingInvoice}\n      />\n    </>\n  );\n}\n","size_bytes":10054},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { FileText } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const { login, isLoading } = useAuth();\n  const { toast } = useToast();\n  \n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n  });\n\n  const onSubmit = async (data: LoginForm) => {\n    try {\n      await login(data.email, data.password);\n    } catch (error) {\n      toast({\n        title: \"Login failed\",\n        description: error instanceof Error ? error.message : \"An error occurred\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Logo */}\n        <div className=\"flex items-center justify-center mb-8\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <FileText className=\"text-white w-6 h-6\" />\n            </div>\n            <span className=\"text-2xl font-bold text-slate-800\">InvoiceFlow</span>\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-2xl font-bold\">Sign in</CardTitle>\n            <CardDescription>\n              Enter your email and password to access your account\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"john@example.com\"\n                  {...register(\"email\")}\n                />\n                {errors.email && (\n                  <p className=\"text-sm text-red-600\">{errors.email.message}</p>\n                )}\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  {...register(\"password\")}\n                />\n                {errors.password && (\n                  <p className=\"text-sm text-red-600\">{errors.password.message}</p>\n                )}\n              </div>\n\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                {isLoading ? \"Signing in...\" : \"Sign in\"}\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-slate-600\">\n                Don't have an account?{\" \"}\n                <Link href=\"/signup\">\n                  <a className=\"text-primary hover:underline font-medium\">\n                    Sign up\n                  </a>\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3758},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/products.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Plus, Edit, Trash2, Package, AlertTriangle } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst productSchema = z.object({\n  sku: z.string().min(1, \"SKU is required\"),\n  name: z.string().min(1, \"Name is required\"),\n  description: z.string().optional(),\n  priceDecimal: z.string().min(1, \"Price is required\"),\n  costDecimal: z.string().min(1, \"Cost is required\"),\n  stockQty: z.string().optional(),\n});\n\ntype ProductForm = z.infer<typeof productSchema>;\n\nexport default function Products() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: products, isLoading } = useQuery({\n    queryKey: [\"/api/products\"],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", \"/api/products\");\n      return res.json();\n    },\n  });\n\n  const form = useForm<ProductForm>({\n    resolver: zodResolver(productSchema),\n    defaultValues: {\n      sku: \"\",\n      name: \"\",\n      description: \"\",\n      priceDecimal: \"\",\n      costDecimal: \"\",\n      stockQty: \"0\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: ProductForm) => {\n      const payload = {\n        ...data,\n        priceDecimal: parseFloat(data.priceDecimal),\n        costDecimal: parseFloat(data.costDecimal),\n        stockQty: parseInt(data.stockQty || \"0\"),\n      };\n      const res = await apiRequest(\"POST\", \"/api/products\", payload);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      setIsDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Product created successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: ProductForm }) => {\n      const payload = {\n        ...data,\n        priceDecimal: parseFloat(data.priceDecimal),\n        costDecimal: parseFloat(data.costDecimal),\n        stockQty: parseInt(data.stockQty || \"0\"),\n      };\n      const res = await apiRequest(\"PUT\", `/api/products/${id}`, payload);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      setIsDialogOpen(false);\n      setEditingProduct(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Product updated successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/products/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Success\",\n        description: \"Product deleted successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ProductForm) => {\n    if (editingProduct) {\n      updateMutation.mutate({ id: editingProduct.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (product: any) => {\n    setEditingProduct(product);\n    form.reset({\n      sku: product.sku,\n      name: product.name,\n      description: product.description || \"\",\n      priceDecimal: product.priceDecimal.toString(),\n      costDecimal: product.costDecimal.toString(),\n      stockQty: product.stockQty.toString(),\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this product?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleOpenDialog = () => {\n    setEditingProduct(null);\n    form.reset();\n    setIsDialogOpen(true);\n  };\n\n  const getStockStatus = (stock: number) => {\n    if (stock <= 0) {\n      return <Badge variant=\"destructive\">Out of Stock</Badge>;\n    } else if (stock <= 5) {\n      return <Badge variant=\"secondary\" className=\"bg-amber-100 text-amber-800\">Low Stock</Badge>;\n    }\n    return <Badge variant=\"secondary\" className=\"bg-emerald-100 text-emerald-800\">In Stock</Badge>;\n  };\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-slate-800\">Products</h1>\n          <p className=\"text-slate-600 mt-2\">Manage your product inventory</p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={handleOpenDialog}>\n              <Plus className=\"mr-2 w-4 h-4\" />\n              Add Product\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[425px]\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingProduct ? \"Edit Product\" : \"Add New Product\"}\n              </DialogTitle>\n              <DialogDescription>\n                {editingProduct \n                  ? \"Update product information below.\"\n                  : \"Fill in the product details below.\"\n                }\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"sku\">SKU *</Label>\n                  <Input\n                    id=\"sku\"\n                    {...form.register(\"sku\")}\n                  />\n                  {form.formState.errors.sku && (\n                    <p className=\"text-sm text-red-600\">{form.formState.errors.sku.message}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"stockQty\">Stock Quantity</Label>\n                  <Input\n                    id=\"stockQty\"\n                    type=\"number\"\n                    {...form.register(\"stockQty\")}\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Product Name *</Label>\n                <Input\n                  id=\"name\"\n                  {...form.register(\"name\")}\n                />\n                {form.formState.errors.name && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.name.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  {...form.register(\"description\")}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"costDecimal\">Cost Price *</Label>\n                  <Input\n                    id=\"costDecimal\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    {...form.register(\"costDecimal\")}\n                  />\n                  {form.formState.errors.costDecimal && (\n                    <p className=\"text-sm text-red-600\">{form.formState.errors.costDecimal.message}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"priceDecimal\">Selling Price *</Label>\n                  <Input\n                    id=\"priceDecimal\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    {...form.register(\"priceDecimal\")}\n                  />\n                  {form.formState.errors.priceDecimal && (\n                    <p className=\"text-sm text-red-600\">{form.formState.errors.priceDecimal.message}</p>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createMutation.isPending || updateMutation.isPending}\n                >\n                  {createMutation.isPending || updateMutation.isPending \n                    ? \"Saving...\" \n                    : editingProduct ? \"Update\" : \"Create\"\n                  }\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>All Products</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"animate-pulse\">\n              <div className=\"h-4 bg-slate-200 rounded w-full mb-4\"></div>\n              <div className=\"h-4 bg-slate-200 rounded w-3/4 mb-4\"></div>\n              <div className=\"h-4 bg-slate-200 rounded w-1/2\"></div>\n            </div>\n          ) : products && products.length > 0 ? (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Product</TableHead>\n                  <TableHead>SKU</TableHead>\n                  <TableHead>Stock</TableHead>\n                  <TableHead>Cost</TableHead>\n                  <TableHead>Price</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {products.map((product: any) => (\n                  <TableRow key={product.id}>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{product.name}</div>\n                        {product.description && (\n                          <div className=\"text-sm text-slate-600 max-w-xs truncate\">\n                            {product.description}\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"font-mono text-sm\">{product.sku}</TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"font-medium\">{product.stockQty}</span>\n                        {getStockStatus(product.stockQty)}\n                      </div>\n                    </TableCell>\n                    <TableCell>${parseFloat(product.costDecimal).toFixed(2)}</TableCell>\n                    <TableCell className=\"font-medium\">${parseFloat(product.priceDecimal).toFixed(2)}</TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(product)}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(product.id)}\n                          disabled={deleteMutation.isPending}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          ) : (\n            <div className=\"text-center py-12\">\n              <div className=\"w-16 h-16 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Package className=\"w-8 h-8 text-slate-400\" />\n              </div>\n              <h3 className=\"text-lg font-medium text-slate-800 mb-2\">No products yet</h3>\n              <p className=\"text-slate-600 mb-4\">Get started by adding your first product.</p>\n              <Button onClick={handleOpenDialog}>\n                <Plus className=\"mr-2 w-4 h-4\" />\n                Add Product\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":13544},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  DollarSign, \n  TrendingUp, \n  TrendingDown, \n  Calculator,\n  Download,\n  Calendar\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/api\";\n\nexport default function Reports() {\n  const [dateRange, setDateRange] = useState({\n    from: new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString().split('T')[0],\n    to: new Date().toISOString().split('T')[0],\n  });\n\n  const { data: pnlData, isLoading, refetch } = useQuery({\n    queryKey: [\"/api/reports/pnl\", dateRange.from, dateRange.to],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", `/api/reports/pnl?from=${dateRange.from}&to=${dateRange.to}`);\n      return res.json();\n    },\n    enabled: !!dateRange.from && !!dateRange.to,\n  });\n\n  const handleDateChange = (field: \"from\" | \"to\", value: string) => {\n    setDateRange(prev => ({ ...prev, [field]: value }));\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(amount);\n  };\n\n  const formatPercentage = (value: number, total: number) => {\n    if (total === 0) return \"0%\";\n    return ((value / total) * 100).toFixed(1) + \"%\";\n  };\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-slate-800\">Reports</h1>\n          <p className=\"text-slate-600 mt-2\">Analyze your business performance</p>\n        </div>\n        <Button variant=\"outline\">\n          <Download className=\"mr-2 w-4 h-4\" />\n          Export Report\n        </Button>\n      </div>\n\n      {/* Date Range Filter */}\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Calendar className=\"mr-2 w-5 h-5\" />\n            Report Period\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-end space-x-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"from\">From Date</Label>\n              <Input\n                id=\"from\"\n                type=\"date\"\n                value={dateRange.from}\n                onChange={(e) => handleDateChange(\"from\", e.target.value)}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"to\">To Date</Label>\n              <Input\n                id=\"to\"\n                type=\"date\"\n                value={dateRange.to}\n                onChange={(e) => handleDateChange(\"to\", e.target.value)}\n              />\n            </div>\n            <Button onClick={() => refetch()}>\n              Update Report\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {isLoading ? (\n        <div className=\"animate-pulse\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-slate-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      ) : pnlData ? (\n        <>\n          {/* Key Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-slate-600 text-sm font-medium\">Total Revenue</p>\n                    <p className=\"text-2xl font-bold text-slate-800 mt-2\">\n                      {formatCurrency(pnlData.revenue)}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-emerald-100 rounded-lg flex items-center justify-center\">\n                    <DollarSign className=\"text-emerald-600 w-6 h-6\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-slate-600 text-sm font-medium\">Cost of Goods Sold</p>\n                    <p className=\"text-2xl font-bold text-slate-800 mt-2\">\n                      {formatCurrency(pnlData.cogs)}\n                    </p>\n                    <p className=\"text-xs text-slate-500 mt-1\">\n                      {formatPercentage(pnlData.cogs, pnlData.revenue)} of revenue\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-amber-100 rounded-lg flex items-center justify-center\">\n                    <Calculator className=\"text-amber-600 w-6 h-6\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-slate-600 text-sm font-medium\">Total Expenses</p>\n                    <p className=\"text-2xl font-bold text-slate-800 mt-2\">\n                      {formatCurrency(pnlData.expenses)}\n                    </p>\n                    <p className=\"text-xs text-slate-500 mt-1\">\n                      {formatPercentage(pnlData.expenses, pnlData.revenue)} of revenue\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n                    <TrendingDown className=\"text-red-600 w-6 h-6\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-slate-600 text-sm font-medium\">Net Profit</p>\n                    <p className={`text-2xl font-bold mt-2 ${\n                      pnlData.netProfit >= 0 ? 'text-emerald-600' : 'text-red-600'\n                    }`}>\n                      {formatCurrency(pnlData.netProfit)}\n                    </p>\n                    <p className=\"text-xs text-slate-500 mt-1\">\n                      {formatPercentage(pnlData.netProfit, pnlData.revenue)} margin\n                    </p>\n                  </div>\n                  <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${\n                    pnlData.netProfit >= 0 ? 'bg-emerald-100' : 'bg-red-100'\n                  }`}>\n                    <TrendingUp className={`w-6 h-6 ${\n                      pnlData.netProfit >= 0 ? 'text-emerald-600' : 'text-red-600'\n                    }`} />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Profit & Loss Statement */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Profit & Loss Statement</CardTitle>\n              <p className=\"text-slate-600\">\n                From {new Date(dateRange.from).toLocaleDateString()} to {new Date(dateRange.to).toLocaleDateString()}\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {/* Revenue Section */}\n                <div>\n                  <div className=\"flex justify-between items-center py-3 border-b border-slate-200\">\n                    <span className=\"font-semibold text-slate-800\">Revenue</span>\n                    <span className=\"font-semibold text-slate-800\">\n                      {formatCurrency(pnlData.revenue)}\n                    </span>\n                  </div>\n                </div>\n\n                {/* Cost of Goods Sold */}\n                <div>\n                  <div className=\"flex justify-between items-center py-2\">\n                    <span className=\"text-slate-600 pl-4\">Cost of Goods Sold</span>\n                    <span className=\"text-slate-600\">\n                      ({formatCurrency(pnlData.cogs)})\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center py-3 border-b border-slate-200 font-medium\">\n                    <span className=\"text-slate-800\">Gross Profit</span>\n                    <span className={pnlData.grossProfit >= 0 ? 'text-emerald-600' : 'text-red-600'}>\n                      {formatCurrency(pnlData.grossProfit)}\n                    </span>\n                  </div>\n                </div>\n\n                {/* Operating Expenses */}\n                <div>\n                  <div className=\"flex justify-between items-center py-2\">\n                    <span className=\"text-slate-600 pl-4\">Operating Expenses</span>\n                    <span className=\"text-slate-600\">\n                      ({formatCurrency(pnlData.expenses)})\n                    </span>\n                  </div>\n                </div>\n\n                {/* Net Profit */}\n                <div className=\"border-t border-slate-300 pt-4\">\n                  <div className=\"flex justify-between items-center py-3\">\n                    <span className=\"text-lg font-bold text-slate-800\">Net Profit</span>\n                    <span className={`text-lg font-bold ${\n                      pnlData.netProfit >= 0 ? 'text-emerald-600' : 'text-red-600'\n                    }`}>\n                      {formatCurrency(pnlData.netProfit)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Insights Card */}\n          <Card className=\"mt-6\">\n            <CardHeader>\n              <CardTitle>Financial Insights</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-medium text-slate-800 mb-2\">Profitability</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-600\">Gross Margin:</span>\n                      <span className=\"font-medium\">\n                        {formatPercentage(pnlData.grossProfit, pnlData.revenue)}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-600\">Net Margin:</span>\n                      <span className=\"font-medium\">\n                        {formatPercentage(pnlData.netProfit, pnlData.revenue)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-slate-800 mb-2\">Cost Structure</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-600\">COGS as % of Revenue:</span>\n                      <span className=\"font-medium\">\n                        {formatPercentage(pnlData.cogs, pnlData.revenue)}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-600\">OpEx as % of Revenue:</span>\n                      <span className=\"font-medium\">\n                        {formatPercentage(pnlData.expenses, pnlData.revenue)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </>\n      ) : (\n        <div className=\"text-center py-12\">\n          <div className=\"w-16 h-16 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Calculator className=\"w-8 h-8 text-slate-400\" />\n          </div>\n          <h3 className=\"text-lg font-medium text-slate-800 mb-2\">No data available</h3>\n          <p className=\"text-slate-600 mb-4\">Select a date range to view your financial reports.</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":12375},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Building, User, CreditCard, Settings as SettingsIcon } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nconst companySchema = z.object({\n  name: z.string().min(1, \"Company name is required\"),\n  address: z.string().optional(),\n  gstin: z.string().optional(),\n  currency: z.string().min(1, \"Currency is required\"),\n  timezone: z.string().min(1, \"Timezone is required\"),\n  allowNegativeStock: z.boolean(),\n});\n\ntype CompanyForm = z.infer<typeof companySchema>;\n\nconst currencies = [\n  { code: \"USD\", name: \"US Dollar\" },\n  { code: \"INR\", name: \"Indian Rupee\" },\n  { code: \"EUR\", name: \"Euro\" },\n  { code: \"GBP\", name: \"British Pound\" },\n];\n\nconst timezones = [\n  \"UTC\",\n  \"America/New_York\",\n  \"America/Chicago\",\n  \"America/Denver\",\n  \"America/Los_Angeles\",\n  \"Europe/London\",\n  \"Europe/Paris\",\n  \"Asia/Kolkata\",\n  \"Asia/Tokyo\",\n  \"Australia/Sydney\",\n];\n\nexport default function Settings() {\n  const { user, company } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<CompanyForm>({\n    resolver: zodResolver(companySchema),\n    defaultValues: {\n      name: company?.name || \"\",\n      address: company?.address || \"\",\n      gstin: company?.gstin || \"\",\n      currency: company?.currency || \"USD\",\n      timezone: company?.timezone || \"UTC\",\n      allowNegativeStock: company?.allowNegativeStock || false,\n    },\n  });\n\n  const updateCompanyMutation = useMutation({\n    mutationFn: async (data: CompanyForm) => {\n      const res = await apiRequest(\"PUT\", \"/api/company/settings\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/profile\"] });\n      toast({\n        title: \"Success\",\n        description: \"Company settings updated successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CompanyForm) => {\n    updateCompanyMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold text-slate-800\">Settings</h1>\n        <p className=\"text-slate-600 mt-2\">Manage your account and company preferences</p>\n      </div>\n\n      <Tabs defaultValue=\"company\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"company\" className=\"flex items-center\">\n            <Building className=\"w-4 h-4 mr-2\" />\n            Company\n          </TabsTrigger>\n          <TabsTrigger value=\"account\" className=\"flex items-center\">\n            <User className=\"w-4 h-4 mr-2\" />\n            Account\n          </TabsTrigger>\n          <TabsTrigger value=\"billing\" className=\"flex items-center\">\n            <CreditCard className=\"w-4 h-4 mr-2\" />\n            Billing\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"company\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Company Information</CardTitle>\n              <p className=\"text-slate-600\">Update your company details and preferences</p>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">Company Name *</Label>\n                    <Input\n                      id=\"name\"\n                      {...form.register(\"name\")}\n                    />\n                    {form.formState.errors.name && (\n                      <p className=\"text-sm text-red-600\">{form.formState.errors.name.message}</p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"gstin\">GSTIN/Tax ID</Label>\n                    <Input\n                      id=\"gstin\"\n                      {...form.register(\"gstin\")}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"address\">Address</Label>\n                  <Textarea\n                    id=\"address\"\n                    {...form.register(\"address\")}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"currency\">Currency *</Label>\n                    <select\n                      id=\"currency\"\n                      {...form.register(\"currency\")}\n                      className=\"w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary\"\n                    >\n                      {currencies.map((currency) => (\n                        <option key={currency.code} value={currency.code}>\n                          {currency.code} - {currency.name}\n                        </option>\n                      ))}\n                    </select>\n                    {form.formState.errors.currency && (\n                      <p className=\"text-sm text-red-600\">{form.formState.errors.currency.message}</p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"timezone\">Timezone *</Label>\n                    <select\n                      id=\"timezone\"\n                      {...form.register(\"timezone\")}\n                      className=\"w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary\"\n                    >\n                      {timezones.map((timezone) => (\n                        <option key={timezone} value={timezone}>\n                          {timezone}\n                        </option>\n                      ))}\n                    </select>\n                    {form.formState.errors.timezone && (\n                      <p className=\"text-sm text-red-600\">{form.formState.errors.timezone.message}</p>\n                    )}\n                  </div>\n                </div>\n\n                {/* Inventory Settings */}\n                <div className=\"border-t pt-6\">\n                  <h3 className=\"text-lg font-medium text-slate-800 mb-4\">Inventory Settings</h3>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-1\">\n                      <Label htmlFor=\"allowNegativeStock\">Allow Negative Stock</Label>\n                      <p className=\"text-sm text-slate-500\">\n                        Allow products to have negative stock quantities\n                      </p>\n                    </div>\n                    <Switch\n                      id=\"allowNegativeStock\"\n                      checked={form.watch(\"allowNegativeStock\")}\n                      onCheckedChange={(checked) => form.setValue(\"allowNegativeStock\", checked)}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end\">\n                  <Button \n                    type=\"submit\" \n                    disabled={updateCompanyMutation.isPending}\n                  >\n                    {updateCompanyMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"account\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Account Information</CardTitle>\n              <p className=\"text-slate-600\">Your personal account details</p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label>Full Name</Label>\n                    <Input value={user?.name || \"\"} disabled />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label>Email Address</Label>\n                    <Input value={user?.email || \"\"} disabled />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Role</Label>\n                  <Input value={user?.role || \"Admin\"} disabled />\n                </div>\n\n                <div className=\"border-t pt-6\">\n                  <h3 className=\"text-lg font-medium text-slate-800 mb-4\">Security</h3>\n                  <Button variant=\"outline\">\n                    Change Password\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"billing\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Billing & Subscription</CardTitle>\n              <p className=\"text-slate-600\">Manage your billing information and subscription</p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                <div className=\"border rounded-lg p-6 bg-slate-50\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div>\n                      <h3 className=\"text-lg font-medium text-slate-800\">Free Plan</h3>\n                      <p className=\"text-slate-600\">Basic features for small businesses</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-2xl font-bold text-slate-800\">$0</p>\n                      <p className=\"text-slate-600\">per month</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2 text-sm text-slate-600\">\n                    <div className=\"flex items-center\">\n                      <span className=\"w-2 h-2 bg-emerald-500 rounded-full mr-2\"></span>\n                      Up to 100 invoices per month\n                    </div>\n                    <div className=\"flex items-center\">\n                      <span className=\"w-2 h-2 bg-emerald-500 rounded-full mr-2\"></span>\n                      Basic reporting\n                    </div>\n                    <div className=\"flex items-center\">\n                      <span className=\"w-2 h-2 bg-emerald-500 rounded-full mr-2\"></span>\n                      Email support\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium text-slate-800\">Payment Method</h3>\n                  <p className=\"text-slate-600\">No payment method required for the free plan</p>\n                  <Button variant=\"outline\">\n                    Add Payment Method\n                  </Button>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium text-slate-800\">Billing History</h3>\n                  <p className=\"text-slate-600\">No billing history available</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":12002},"client/src/pages/signup.tsx":{"content":"import { Link } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { FileText } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst signupSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  companyName: z.string().min(1, \"Company name is required\"),\n});\n\ntype SignupForm = z.infer<typeof signupSchema>;\n\nexport default function Signup() {\n  const { signup, isLoading } = useAuth();\n  const { toast } = useToast();\n  \n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<SignupForm>({\n    resolver: zodResolver(signupSchema),\n  });\n\n  const onSubmit = async (data: SignupForm) => {\n    try {\n      await signup(data);\n    } catch (error) {\n      toast({\n        title: \"Signup failed\",\n        description: error instanceof Error ? error.message : \"An error occurred\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Logo */}\n        <div className=\"flex items-center justify-center mb-8\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <FileText className=\"text-white w-6 h-6\" />\n            </div>\n            <span className=\"text-2xl font-bold text-slate-800\">InvoiceFlow</span>\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-2xl font-bold\">Create account</CardTitle>\n            <CardDescription>\n              Enter your details below to create your account\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Full Name</Label>\n                <Input\n                  id=\"name\"\n                  placeholder=\"John Doe\"\n                  {...register(\"name\")}\n                />\n                {errors.name && (\n                  <p className=\"text-sm text-red-600\">{errors.name.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"john@example.com\"\n                  {...register(\"email\")}\n                />\n                {errors.email && (\n                  <p className=\"text-sm text-red-600\">{errors.email.message}</p>\n                )}\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  {...register(\"password\")}\n                />\n                {errors.password && (\n                  <p className=\"text-sm text-red-600\">{errors.password.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"companyName\">Company Name</Label>\n                <Input\n                  id=\"companyName\"\n                  placeholder=\"Acme Corp\"\n                  {...register(\"companyName\")}\n                />\n                {errors.companyName && (\n                  <p className=\"text-sm text-red-600\">{errors.companyName.message}</p>\n                )}\n              </div>\n\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                {isLoading ? \"Creating account...\" : \"Create account\"}\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-slate-600\">\n                Already have an account?{\" \"}\n                <Link href=\"/login\">\n                  <a className=\"text-primary hover:underline font-medium\">\n                    Sign in\n                  </a>\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4703},"client/src/components/invoices/invoice-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Plus, Trash2, X } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst invoiceItemSchema = z.object({\n  productId: z.string().min(1, \"Product is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  qty: z.number().min(1, \"Quantity must be at least 1\"),\n  unitPrice: z.number().min(0, \"Unit price must be positive\"),\n  taxRate: z.number().min(0).max(100, \"Tax rate must be between 0-100\"),\n});\n\nconst invoiceSchema = z.object({\n  customerId: z.string().min(1, \"Customer is required\"),\n  date: z.string().min(1, \"Date is required\"),\n  dueDate: z.string().min(1, \"Due date is required\"),\n  status: z.enum([\"draft\", \"issued\"]),\n  notes: z.string().optional(),\n  items: z.array(invoiceItemSchema).min(1, \"At least one item is required\"),\n});\n\ntype InvoiceForm = z.infer<typeof invoiceSchema>;\n\ninterface InvoiceModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  editingInvoice?: any;\n}\n\nexport default function InvoiceModal({ isOpen, onClose, editingInvoice }: InvoiceModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: customers } = useQuery({\n    queryKey: [\"/api/customers\"],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", \"/api/customers\");\n      return res.json();\n    },\n  });\n\n  const { data: products } = useQuery({\n    queryKey: [\"/api/products\"],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", \"/api/products\");\n      return res.json();\n    },\n  });\n\n  const form = useForm<InvoiceForm>({\n    resolver: zodResolver(invoiceSchema),\n    defaultValues: {\n      customerId: \"\",\n      date: new Date().toISOString().split('T')[0],\n      dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      status: \"draft\",\n      notes: \"\",\n      items: [\n        {\n          productId: \"\",\n          description: \"\",\n          qty: 1,\n          unitPrice: 0,\n          taxRate: 18,\n        },\n      ],\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"items\",\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InvoiceForm) => {\n      const payload = {\n        invoice: {\n          customerId: data.customerId,\n          date: new Date(data.date),\n          dueDate: new Date(data.dueDate),\n          status: data.status,\n          notes: data.notes,\n          subTotal: calculateSubtotal(),\n          taxTotal: calculateTaxTotal(),\n          total: calculateTotal(),\n        },\n        items: data.items.map(item => ({\n          productId: item.productId,\n          description: item.description,\n          qty: item.qty,\n          unitPrice: item.unitPrice,\n          taxRate: item.taxRate,\n          lineTotal: calculateLineTotal(item.qty, item.unitPrice, item.taxRate),\n        })),\n      };\n      const res = await apiRequest(\"POST\", \"/api/invoices\", payload);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      onClose();\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Invoice created successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const watchedItems = form.watch(\"items\");\n\n  const getProduct = (productId: string) => {\n    return products?.find((p: any) => p.id === productId);\n  };\n\n  const handleProductChange = (index: number, productId: string) => {\n    const product = getProduct(productId);\n    if (product) {\n      form.setValue(`items.${index}.productId`, productId);\n      form.setValue(`items.${index}.description`, product.name);\n      form.setValue(`items.${index}.unitPrice`, Number(product.priceDecimal));\n    }\n  };\n\n  const calculateLineTotal = (qty: number, unitPrice: number, taxRate: number) => {\n    const subtotal = qty * unitPrice;\n    const tax = subtotal * (taxRate / 100);\n    return subtotal + tax;\n  };\n\n  const calculateSubtotal = () => {\n    return watchedItems.reduce((sum, item) => sum + (item.qty * item.unitPrice), 0);\n  };\n\n  const calculateTaxTotal = () => {\n    return watchedItems.reduce((sum, item) => {\n      const subtotal = item.qty * item.unitPrice;\n      return sum + (subtotal * (item.taxRate / 100));\n    }, 0);\n  };\n\n  const calculateTotal = () => {\n    return calculateSubtotal() + calculateTaxTotal();\n  };\n\n  const onSubmit = (data: InvoiceForm) => {\n    createMutation.mutate(data);\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(amount);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[900px] max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>\n            {editingInvoice ? \"Edit Invoice\" : \"Create New Invoice\"}\n          </DialogTitle>\n          <DialogDescription>\n            {editingInvoice \n              ? \"Update invoice details below.\"\n              : \"Fill in the invoice details below.\"\n            }\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Invoice Header Info */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"customerId\">Customer *</Label>\n              <select\n                id=\"customerId\"\n                {...form.register(\"customerId\")}\n                className=\"w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary\"\n              >\n                <option value=\"\">Select Customer...</option>\n                {customers?.map((customer: any) => (\n                  <option key={customer.id} value={customer.id}>\n                    {customer.name}\n                  </option>\n                ))}\n              </select>\n              {form.formState.errors.customerId && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.customerId.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"date\">Invoice Date *</Label>\n              <Input\n                id=\"date\"\n                type=\"date\"\n                {...form.register(\"date\")}\n              />\n              {form.formState.errors.date && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.date.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"dueDate\">Due Date *</Label>\n              <Input\n                id=\"dueDate\"\n                type=\"date\"\n                {...form.register(\"dueDate\")}\n              />\n              {form.formState.errors.dueDate && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.dueDate.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"status\">Status</Label>\n              <select\n                id=\"status\"\n                {...form.register(\"status\")}\n                className=\"w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary\"\n              >\n                <option value=\"draft\">Draft</option>\n                <option value=\"issued\">Issued</option>\n              </select>\n            </div>\n          </div>\n\n          {/* Invoice Items */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <Label className=\"text-base font-medium\">Invoice Items</Label>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => append({\n                  productId: \"\",\n                  description: \"\",\n                  qty: 1,\n                  unitPrice: 0,\n                  taxRate: 18,\n                })}\n              >\n                <Plus className=\"mr-2 w-4 h-4\" />\n                Add Item\n              </Button>\n            </div>\n\n            <div className=\"border border-slate-200 rounded-lg overflow-hidden\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Product</TableHead>\n                    <TableHead>Description</TableHead>\n                    <TableHead>Qty</TableHead>\n                    <TableHead>Unit Price</TableHead>\n                    <TableHead>Tax %</TableHead>\n                    <TableHead>Total</TableHead>\n                    <TableHead className=\"w-12\"></TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {fields.map((field, index) => {\n                    const item = watchedItems[index];\n                    const lineTotal = item ? calculateLineTotal(item.qty, item.unitPrice, item.taxRate) : 0;\n\n                    return (\n                      <TableRow key={field.id}>\n                        <TableCell>\n                          <select\n                            {...form.register(`items.${index}.productId`)}\n                            onChange={(e) => handleProductChange(index, e.target.value)}\n                            className=\"w-full text-sm border-0 focus:ring-0 p-1\"\n                          >\n                            <option value=\"\">Select Product...</option>\n                            {products?.map((product: any) => (\n                              <option key={product.id} value={product.id}>\n                                {product.name}\n                              </option>\n                            ))}\n                          </select>\n                        </TableCell>\n                        <TableCell>\n                          <Input\n                            {...form.register(`items.${index}.description`)}\n                            className=\"border-0 focus:ring-0 p-1\"\n                            placeholder=\"Description\"\n                          />\n                        </TableCell>\n                        <TableCell>\n                          <Input\n                            type=\"number\"\n                            {...form.register(`items.${index}.qty`, { valueAsNumber: true })}\n                            className=\"border-0 focus:ring-0 p-1 w-20\"\n                            min=\"1\"\n                          />\n                        </TableCell>\n                        <TableCell>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            {...form.register(`items.${index}.unitPrice`, { valueAsNumber: true })}\n                            className=\"border-0 focus:ring-0 p-1 w-24\"\n                            min=\"0\"\n                          />\n                        </TableCell>\n                        <TableCell>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            {...form.register(`items.${index}.taxRate`, { valueAsNumber: true })}\n                            className=\"border-0 focus:ring-0 p-1 w-20\"\n                            min=\"0\"\n                            max=\"100\"\n                          />\n                        </TableCell>\n                        <TableCell className=\"font-medium\">\n                          {formatCurrency(lineTotal)}\n                        </TableCell>\n                        <TableCell>\n                          {fields.length > 1 && (\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => remove(index)}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          )}\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </div>\n\n            {form.formState.errors.items && (\n              <p className=\"text-sm text-red-600\">{form.formState.errors.items.message}</p>\n            )}\n          </div>\n\n          {/* Invoice Totals */}\n          <div className=\"flex justify-end\">\n            <div className=\"w-80 space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-slate-600\">Subtotal:</span>\n                <span className=\"font-medium\">{formatCurrency(calculateSubtotal())}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-slate-600\">Tax:</span>\n                <span className=\"font-medium\">{formatCurrency(calculateTaxTotal())}</span>\n              </div>\n              <div className=\"border-t pt-2\">\n                <div className=\"flex justify-between font-semibold\">\n                  <span>Total:</span>\n                  <span className=\"text-lg\">{formatCurrency(calculateTotal())}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Notes */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"notes\">Notes</Label>\n            <Textarea\n              id=\"notes\"\n              {...form.register(\"notes\")}\n              placeholder=\"Additional notes or terms...\"\n            />\n          </div>\n\n          {/* Modal Actions */}\n          <div className=\"flex justify-end space-x-3 pt-6 border-t border-slate-200\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={createMutation.isPending}\n            >\n              {createMutation.isPending ? \"Creating...\" : \"Create Invoice\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":14959},"client/src/components/layout/app-layout.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Sidebar from \"./sidebar\";\nimport Header from \"./header\";\n\ninterface AppLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function AppLayout({ children }: AppLayoutProps) {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      setLocation(\"/login\");\n    }\n  }, [user, isLoading, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex h-screen bg-slate-50\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header />\n        <main className=\"flex-1 overflow-y-auto\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1004},"client/src/components/layout/header.tsx":{"content":"import { useState } from \"react\";\nimport { Search, Bell, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport InvoiceModal from \"@/components/invoices/invoice-modal\";\n\nexport default function Header() {\n  const [isInvoiceModalOpen, setIsInvoiceModalOpen] = useState(false);\n\n  return (\n    <>\n      <header className=\"bg-white border-b border-slate-200 px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex-1 max-w-md\">\n            <div className=\"relative\">\n              <Input \n                type=\"text\" \n                placeholder=\"Search invoices, customers...\" \n                className=\"pl-10\"\n              />\n              <Search className=\"absolute left-3 top-2.5 text-slate-400 w-4 h-4\" />\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            {/* Notifications */}\n            <button className=\"relative p-2 text-slate-400 hover:text-slate-600 rounded-lg hover:bg-slate-100\">\n              <Bell className=\"w-5 h-5\" />\n              <span className=\"absolute -top-1 -right-1 h-4 w-4 bg-red-500 text-white text-xs rounded-full flex items-center justify-center\">\n                3\n              </span>\n            </button>\n\n            {/* Quick Actions */}\n            <Button onClick={() => setIsInvoiceModalOpen(true)}>\n              <Plus className=\"mr-2 w-4 h-4\" />\n              New Invoice\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <InvoiceModal \n        isOpen={isInvoiceModalOpen}\n        onClose={() => setIsInvoiceModalOpen(false)}\n      />\n    </>\n  );\n}\n","size_bytes":1708},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { \n  ChartLine, \n  FileText, \n  Users, \n  Package, \n  Receipt, \n  BarChart3, \n  Settings,\n  LogOut,\n  User\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst navItems = [\n  { icon: ChartLine, label: \"Dashboard\", href: \"/\" },\n  { icon: FileText, label: \"Invoices\", href: \"/invoices\" },\n  { icon: Users, label: \"Customers\", href: \"/customers\" },\n  { icon: Package, label: \"Products\", href: \"/products\" },\n  { icon: Receipt, label: \"Expenses\", href: \"/expenses\" },\n  { icon: BarChart3, label: \"Reports\", href: \"/reports\" },\n  { icon: Settings, label: \"Settings\", href: \"/settings\" },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const { user, logout } = useAuth();\n\n  return (\n    <aside className=\"w-64 bg-white shadow-lg border-r border-slate-200 flex flex-col\">\n      {/* Logo Section */}\n      <div className=\"p-6 border-b border-slate-200\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <FileText className=\"text-white text-sm\" />\n          </div>\n          <span className=\"text-xl font-semibold text-slate-800\">InvoiceFlow</span>\n        </div>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 py-6 px-4 space-y-2\">\n        {navItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.href || (item.href === \"/\" && location === \"/dashboard\");\n          \n          return (\n            <Link key={item.href} href={item.href}>\n              <a className={cn(\n                \"flex items-center px-4 py-3 text-slate-600 hover:bg-primary-50 hover:text-primary-600 rounded-lg transition-colors group\",\n                isActive && \"bg-primary-50 text-primary-600\"\n              )}>\n                <Icon className=\"w-5 h-5 mr-3\" />\n                <span className=\"font-medium\">{item.label}</span>\n              </a>\n            </Link>\n          );\n        })}\n      </nav>\n\n      {/* User Profile Section */}\n      <div className=\"p-4 border-t border-slate-200\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-slate-300 rounded-full flex items-center justify-center\">\n            <User className=\"text-slate-600 w-5 h-5\" />\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium text-slate-800 truncate\">{user?.name}</p>\n            <p className=\"text-xs text-slate-500 truncate\">{user?.email}</p>\n          </div>\n          <button \n            onClick={logout}\n            className=\"text-slate-400 hover:text-slate-600 p-1\"\n            title=\"Logout\"\n          >\n            <LogOut className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":2894},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}